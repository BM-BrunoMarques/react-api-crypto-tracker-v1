[{"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js":"1","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js":"2","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\params.js":"3","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js":"4","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.js":"5","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\ItemList.js":"6","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx":"7","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CurrencyCard\\CurrencyCard.jsx":"8","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx":"9","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\TableScroll\\TableScroll.jsx":"10","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js":"11","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\coinsHomeListing.js":"12","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing.js":"13","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks.jsx":"14","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx":"15","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart.jsx":"16","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js":"17","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo.jsx":"18","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinDataTable.jsx":"19"},{"size":2614,"mtime":1613782709770,"results":"20","hashOfConfig":"21"},{"size":3233,"mtime":1613968510597,"results":"22","hashOfConfig":"21"},{"size":53,"mtime":1612069310891,"results":"23","hashOfConfig":"21"},{"size":218,"mtime":1612069310889,"results":"24","hashOfConfig":"21"},{"size":1677,"mtime":1613279570329,"results":"25","hashOfConfig":"21"},{"size":776,"mtime":1612760567320,"results":"26","hashOfConfig":"21"},{"size":296,"mtime":1613771445033,"results":"27","hashOfConfig":"21"},{"size":559,"mtime":1612987998476,"results":"28","hashOfConfig":"21"},{"size":781,"mtime":1613277189129,"results":"29","hashOfConfig":"21"},{"size":4551,"mtime":1613530729590,"results":"30","hashOfConfig":"21"},{"size":1029,"mtime":1613882177093,"results":"31","hashOfConfig":"21"},{"size":2501,"mtime":1613280329088,"results":"32","hashOfConfig":"21"},{"size":2808,"mtime":1613871505302,"results":"33","hashOfConfig":"21"},{"size":5081,"mtime":1613955570315,"results":"34","hashOfConfig":"21"},{"size":5273,"mtime":1613957723817,"results":"35","hashOfConfig":"21"},{"size":2556,"mtime":1613984094367,"results":"36","hashOfConfig":"21"},{"size":570,"mtime":1613968769955,"results":"37","hashOfConfig":"21"},{"size":2151,"mtime":1613968932508,"results":"38","hashOfConfig":"21"},{"size":1303,"mtime":1613968938405,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"phcpdk",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"43"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"43"},"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js",["89","90"],"import \"../App.css\";\r\nimport React, { useState, useRef, createContext, useEffect } from \"react\";\r\n\r\nimport Coin from \"./Coin/Coin\";\r\nimport CoinsHomeListing from \"./CoinsHomeListing\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport { Layout, Row, Col } from \"antd\";\r\nconst { Header, Content, Footer } = Layout;\r\nexport const stateCoinsContext = createContext();\r\n\r\nfunction App() {\r\n  const scrollParentRef = useRef(null);\r\n\r\n  const [stateValues, setStateValues] = useState({\r\n    coins: [],\r\n    page: 1,\r\n    isLoading: false,\r\n  });\r\n\r\n  const [isLoading, setLoading] = useState({\r\n    load: false,\r\n    tip: \"\",\r\n  });\r\n\r\n  // const [page, setPage] = useState(1);\r\n\r\n  const [selectedCoin, setSelectedCoin] = useState(\"\");\r\n  const [moreItems, setMoreItems] = useState(true);\r\n  const [numOfPages, setnumOfPages] = useState();\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [scrollPosition, setScrollPosition] = useState(\"\");\r\n\r\n  const coinsStoreContext = {\r\n    selectedCoinC: [selectedCoin, setSelectedCoin],\r\n    moreItemsC: [moreItems, setMoreItems],\r\n    numOfPagesC: [numOfPages, setnumOfPages],\r\n    stateCoinsC: [stateValues, setStateValues],\r\n    isLoadingC: [isLoading, setLoading],\r\n    searchTextC: [searchText, setSearchText],\r\n    scrollPositionC: [scrollPosition, setScrollPosition],\r\n    scrollParentRefC: scrollParentRef,\r\n  };\r\n\r\n  return (\r\n    <Layout style={{ height: \"100%\" }}>\r\n      <stateCoinsContext.Provider value={coinsStoreContext}>\r\n        <BrowserRouter>\r\n          <Header>\r\n            <Row style={{ width: \"100%\" }} align=\"middle\" justify=\"end\">\r\n              <Col xs={{ span: 10, offset: 9 }} xl={{ span: 5, offset: 18 }}>\r\n                <SearchBar\r\n                  selectedCoin={selectedCoin}\r\n                  setSelectedCoin={setSelectedCoin}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Header>\r\n          <Content>\r\n            <Row style={{ height: \"100%\" }} align=\"middle\">\r\n              <Col\r\n                xs={{ span: 24, offset: 0 }}\r\n                sm={{ span: 18, offset: 3 }}\r\n                xl={{ span: 18, offset: 3 }}\r\n                xxl={{ span: 15, offset: 5 }}\r\n                style={{ height: \"100%\", maxHeight: \"70vh\" }}\r\n              >\r\n                <Route path=\"/\" component={CoinsHomeListing} />\r\n                <Route path=\"/coin\" component={Coin} />\r\n              </Col>\r\n            </Row>\r\n          </Content>\r\n        </BrowserRouter>\r\n      </stateCoinsContext.Provider>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["91","92"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\params.js",[],["93","94"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.js",["95","96"],"import \"../App.css\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { getAllCoinsList } from \"../utils/api\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { Sorter } from \"./AutoComplete/Sorter\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { stateCoinsContext } from \"./App\";\r\n\r\nexport default function SearchBar(props) {\r\n  //useContext\r\n  const { selectedCoinC, isLoadingC, searchTextC } = useContext(\r\n    stateCoinsContext\r\n  );\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [searchText, setSearchText] = searchTextC;\r\n  //useState\r\n  const [searchCoins, setCoins] = useState([]);\r\n  const [searchOptions, setOptions] = useState([]);\r\n  const history = useHistory();\r\n\r\n  //Hooks\r\n  useEffect(() => {\r\n    getAllCoinsList().then((coins) => {\r\n      setCoins(coins);\r\n    });\r\n  }, []);\r\n\r\n  const onSelect = (data) => {\r\n    setSelectedCoin(data);\r\n    history.push({\r\n      pathname: \"/coin/\" + data,\r\n    });\r\n    setSearchText('');\r\n  };\r\n\r\n  const onSearch = (searchText) => {\r\n    setSearchText(searchText);\r\n    const filteredOptions = Sorter(searchCoins, searchText);\r\n    setOptions(filteredOptions);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {searchCoins && (\r\n        <div>\r\n          <AutoComplete\r\n            placeholder='Looking for a specific coin?'\r\n            value={searchText}\r\n            options={searchOptions || []}\r\n            onSelect={onSelect}\r\n            onSearch={onSearch}\r\n            backfill={true}\r\n            disabled={isLoading}\r\n            style={{ width: \"200px\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\ItemList.js",[],["97","98"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CurrencyCard\\CurrencyCard.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\TableScroll\\TableScroll.jsx",["99","100"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Table, Avatar } from \"antd\";\r\nimport { TinyLine } from \"@ant-design/charts\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { formatPrice, formatPercentage } from \"../../utils/helpers\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./TableScroll.css\";\r\n\r\nexport default function TableScroll() {\r\n  const { stateCoinsC, isLoadingC } = useContext(stateCoinsContext);\r\n  const [stateValues] = stateCoinsC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setLoading({\r\n      load: false,\r\n    });\r\n  }, []);\r\n\r\n  const config = {\r\n    height: 60,\r\n    width: 80,\r\n    autoFit: false,\r\n    smooth: false,\r\n    passive: false,\r\n\r\n    lineStyle: {\r\n      stroke: \"blue\",\r\n      lineWidth: 1,\r\n      lineDash: [1, 1],\r\n      strokeOpacity: 0.7,\r\n      shadowColor: \"black\",\r\n      shadowBlur: 10,\r\n      shadowOffsetX: 5,\r\n      shadowOffsetY: 5,\r\n    },\r\n    tooltip: {\r\n      formatter: (data) => {\r\n        return data.y;\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Coin\",\r\n      dataIndex: [\"image\", \"name\"],\r\n      key: \"coin\",\r\n      fixed: \"left\",\r\n      width: 80,\r\n      align: \"center\",\r\n      render: (empty, record) => {\r\n        return {\r\n          children: (\r\n            <div style={{ display: \"flex\" }}>\r\n              <Avatar size=\"normal\" src={record.image} />\r\n              <span className=\"title\">{record.name}</span>\r\n              <div\r\n                style={{ position: \" absolute\", top: \"-35px\" }}\r\n                id={record.id}\r\n              ></div>\r\n            </div>\r\n          ),\r\n        };\r\n      },\r\n    },\r\n    {\r\n      dataIndex: \"symbol\",\r\n      key: \"symbol\",\r\n      width: 20,\r\n      align: \"center\",\r\n      render: (data) => {\r\n        return {\r\n          children: <span className=\"symbol\">{data.toUpperCase()}</span>,\r\n        };\r\n      },\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      dataIndex: \"current_price\",\r\n      key: \"current_price\",\r\n      width: 80,\r\n      align: \"center\",\r\n      render: (price) => {\r\n        return {\r\n          children: <span>{formatPrice(price)}</span>,\r\n        };\r\n      },\r\n    },\r\n    {\r\n      title: \"1h\",\r\n      dataIndex: \"price_change_percentage_1h_in_currency\",\r\n      key: \"price_change_percentage_1h_in_currency\",\r\n      width: 30,\r\n      align: \"center\",\r\n      render: (percent) => (\r\n        <span className={`percent ${percent > 0 ? \"positive\" : \"negative\"}`}>\r\n          {formatPercentage(percent)}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"24h\",\r\n      dataIndex: \"price_change_percentage_24h_in_currency\",\r\n      key: \"price_change_percentage_24h_in_currency\",\r\n      width: 30,\r\n      align: \"center\",\r\n      render: (percent) => (\r\n        <span className={`percent ${percent > 0 ? \"positive\" : \"negative\"}`}>\r\n          {formatPercentage(percent)}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"7d\",\r\n      dataIndex: \"price_change_percentage_7d_in_currency\",\r\n      key: \"price_change_percentage_7d_in_currency\",\r\n      width: 30,\r\n      align: \"center\",\r\n      render: (percent) => (\r\n        <span className={`percent ${percent > 0 ? \"positive\" : \"negative\"}`}>\r\n          {formatPercentage(percent)}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Last 7 Days\",\r\n      dataIndex: \"sparkline_in_7d\",\r\n      key: \"sparkline_in_7d\",\r\n      align: \"center\",\r\n      width: 100,\r\n      height: 60,\r\n      render: ({ price }) => {\r\n        // const dataMod = price.map((price) => price.toFixed(4));\r\n        // <MiniChart dataSet={price}/>\r\n        return <TinyLine data={price} {...config} />;\r\n        // const sparklinePrices = sparkline.price.map((price, indx) => ({\r\n        //   day: Math.round(indx * 100 / sparkline.price.length),\r\n        //   value: Math.ceil(price),\r\n        // }));\r\n        // return <Line data={sparklinePrices} {...config} />;\r\n      },\r\n    },\r\n  ];\r\n  return (\r\n    <Table\r\n      onRow={(record) => {\r\n        return {\r\n          onClick: () => {\r\n            setLoading({\r\n              load: true,\r\n              tip: `Loading Coin!`,\r\n            });\r\n            setTimeout(() => {\r\n              history.push(`/coin/${record.id}`);\r\n            }, 10);\r\n          }, // click row\r\n        };\r\n      }}\r\n      pagination={false}\r\n      columns={columns}\r\n      dataSource={stateValues.coins}\r\n      rowKey={(record, indx) => `${record.id}${indx}`}\r\n      sticky={true}\r\n      scroll={{ x: \"max-content\" }}\r\n    />\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\coinsHomeListing.js",["101"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing.js",["102","103","104","105","106"],"import \"../App.css\";\r\nimport React, { useEffect, useContext, useRef } from \"react\";\r\nimport { getCoins, getAllCoinsList } from \"../utils/api.js\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Spinner } from \"./loadingSpinner/Spinner\";\r\nimport { stateCoinsContext } from \"./App\";\r\nimport { CurrencyCard } from \"./CurrencyCard/CurrencyCard\";\r\nimport TableScroll from \"./TableScroll/TableScroll\";\r\n\r\nexport default function CoinsHomeListing(props) {\r\n  const {\r\n    moreItemsC,\r\n    numOfPagesC,\r\n    stateCoinsC,\r\n    isLoadingC,\r\n    scrollParentRefC,\r\n    selectedCoinC,\r\n    scrollPositionC,\r\n  } = useContext(stateCoinsContext);\r\n  const scrollParentRef = useRef(null);\r\n\r\n  const [selectedCoin] = selectedCoinC;\r\n  const [moreItems, setMoreItems] = moreItemsC;\r\n  const [numOfPages, setnumOfPages] = numOfPagesC;\r\n  const [stateValues, setStateValues] = stateCoinsC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [scrollPosition, setScrollPosition] = scrollPositionC;\r\n  //\r\n  const tip = '';\r\n\r\n  useEffect(() => {\r\n    if (!numOfPages) {\r\n      getAllCoinsList().then((responseAllCoins) => {\r\n        setnumOfPages(Math.ceil(responseAllCoins.length / 250));\r\n      });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    if (scrollPosition) {\r\n      document?.getElementById(scrollPosition)?.scrollIntoView();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n  const fetchData = () => {\r\n    if (isLoading.load || !moreItems || selectedCoin) return;\r\n    //\r\n    setLoading({\r\n      load: true,\r\n      tip: 'Fetching Coins...'\r\n    });\r\n    if (stateValues.page > numOfPages) {\r\n      setMoreItems(false);\r\n    }\r\n    getCoins(stateValues.page).then((responseCoins) => {\r\n      console.log(\"fetched\");\r\n\r\n      setStateValues((prevState) => {\r\n        return {\r\n          coins: prevState.coins\r\n            .concat(responseCoins)\r\n            .filter((val, id, array) => array.indexOf(val) === id),\r\n          page: prevState.page + 1,\r\n        };\r\n      });\r\n      setLoading(false);\r\n    });\r\n  };\r\n  return (\r\n    <div\r\n      ref={scrollParentRef}\r\n      style={{\r\n        minHeight: \"500px\",\r\n        maxHeight: \"70vh\",\r\n        overflowY: \"scroll\",\r\n      }}\r\n    >\r\n      {isLoading.load && <Spinner tip={isLoading.tip} />}\r\n\r\n      {numOfPages && (\r\n        <InfiniteScroll\r\n          loadMore={fetchData}\r\n          hasMore={moreItems}\r\n          getScrollParent={() => scrollParentRefC.current}\r\n          useWindow={false}\r\n        >\r\n          <TableScroll />\r\n          {/* <CurrencyCard coins={stateValues.coins} /> */}\r\n          {!moreItems && (\r\n            <p style={{ textAlign: \"center\" }}>\r\n              <b>You have seen it all...</b>\r\n            </p>\r\n          )}\r\n        </InfiniteScroll>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks.jsx",["107","108","109"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport React from \"react\";\r\nimport { Tag } from \"antd\";\r\nimport {\r\n  TwitterOutlined,\r\n  FacebookOutlined,\r\n  RedditOutlined,\r\n  SendOutlined,\r\n  CodeSandboxOutlined,\r\n  GithubOutlined,\r\n  LinkOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { colors } from \"../../utils/const\";\r\n\r\nexport default function TagLinks(props) {\r\n  const { coinData } = props;\r\n  const { facebook, reddit, twitter, telegram, repos, blueGray } = colors;\r\n\r\n  const renderItemLink = (item, color, icon) => {\r\n    let url, itemName;\r\n    if (item.length) {\r\n      url = new URL(item);\r\n      const itemSplit = url.hostname.split(\".\");\r\n\r\n      itemName = itemSplit[Math.floor((itemSplit.length - 1) / 2)];\r\n    }\r\n    return item.length ? (\r\n      <Tag icon={icon} color={color}>\r\n        <a href={item}>{itemName}</a>\r\n      </Tag>\r\n    ) : null;\r\n  };\r\n\r\n  const checkForContent = (section) => {\r\n    switch (section) {\r\n      case \"social\":\r\n        if (\r\n          coinData.links.subreddit_url?.length ||\r\n          coinData.links.twitter_screen_name?.length ||\r\n          coinData.links.facebook_username?.length ||\r\n          coinData.links.telegram_channel_identifier?.length ||\r\n          coinData.links.official_forum_url[0]\r\n        ) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tagLinks\">\r\n      {coinData.coingecko_rank && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Rank</div>\r\n          <div className=\"tagsContainer\">\r\n            <Tag className=\"rank\">Rank #{coinData.coingecko_rank}</Tag>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {coinData.links.homepage[0] && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Website</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.homepage.map((item) => renderItemLink(item))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {coinData.links.blockchain_site[0] && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Explorers</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.blockchain_site.map((item) => renderItemLink(item))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {checkForContent(\"social\") && (\r\n        <div className=\"tagRow social\">\r\n          <div className=\"tagLegend\">Community</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.subreddit_url && (\r\n              <Tag icon={<RedditOutlined />} color={reddit}>\r\n                <a href={coinData.links.subreddit_url}>Reddit</a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.twitter_screen_name && (\r\n              <Tag icon={<TwitterOutlined />} color={twitter}>\r\n                <a\r\n                  href={`https://twitter.com/${coinData.links.twitter_screen_name}`}\r\n                >\r\n                  Twitter\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.facebook_username && (\r\n              <Tag icon={<FacebookOutlined />} color={facebook}>\r\n                <a\r\n                  href={`https://facebook.com/${coinData.links.facebook_username}`}\r\n                >\r\n                  Facebook\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.telegram_channel_identifier && (\r\n              <Tag icon={<SendOutlined />} color={telegram}>\r\n                <a\r\n                  href={`https://t.me/${coinData.links.telegram_channel_identifier}`}\r\n                >\r\n                  Telegram\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.official_forum_url &&\r\n              coinData.links.homepage.map((item) =>\r\n                renderItemLink(item, blueGray, <LinkOutlined />)\r\n              )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {(coinData.links.repos_url.github[0] ||\r\n        coinData.links.repos_url.bitbucket[0]) && (\r\n        <div className=\"tagRow repos\">\r\n          <div className=\"tagLegend\">\r\n            <span>Source Code</span>\r\n          </div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.repos_url.github.map((item, indx) => {\r\n              if (!item.length) return;\r\n\r\n              return (\r\n                <Tag\r\n                  key={`${item} ${indx}`}\r\n                  icon={<GithubOutlined />}\r\n                  color={repos}\r\n                >\r\n                  <a href={item}>Github</a>\r\n                </Tag>\r\n              );\r\n            })}\r\n            {coinData.links.repos_url.bitbucket.map((item) => {\r\n              if (!item.length) return;\r\n\r\n              return (\r\n                <Tag\r\n                  icon={<CodeSandboxOutlined />}\r\n                  className=\"forum\"\r\n                  color={repos}\r\n                >\r\n                  <a href={item}>Bitbucket</a>\r\n                </Tag>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx",["110","111","112"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport { formatPrice, formatPercentage } from \"../../utils/helpers\";\r\nimport React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { Spinner } from \"../loadingSpinner/Spinner\";\r\nimport { Avatar, Row, Col } from \"antd\";\r\nimport { getSelectedCoinData } from \"../../utils/api\";\r\nimport parse from \"html-react-parser\";\r\nimport TagLinks from \"./TagLinks\";\r\nimport CoinChart from \"./CoinChart\";\r\nimport CoinInfo from \"./CoinInfo\";\r\nimport CoinDataTable from \"./CoinDataTable\";\r\n\r\nexport default function Coin(props) {\r\n  const {\r\n    selectedCoinC,\r\n    isLoadingC,\r\n    searchTextC,\r\n    scrollPositionC,\r\n  } = useContext(stateCoinsContext);\r\n\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [searchText, setSearchText] = searchTextC;\r\n  const [scrollPosition, setScrollPosition] = scrollPositionC;\r\n\r\n  const [coinData, setcoinData] = useState();\r\n  const history = useHistory();\r\n\r\n  const { coinId } = props.history.location;\r\n\r\n  const avatarSize = {\r\n    xs: 40,\r\n    sm: 40,\r\n    md: 40,\r\n    lg: 64,\r\n    xl: 80,\r\n    xxl: 80,\r\n  };\r\n\r\n  let urlSlice = \"\";\r\n  useEffect(() => {\r\n    urlSlice = props.location.pathname.split(\"/\").pop();\r\n    if (!selectedCoin || selectedCoin !== urlSlice) {\r\n      if (urlSlice !== \"/coin\") {\r\n        setSelectedCoin(urlSlice);\r\n        setScrollPosition(urlSlice);\r\n      } else if (!coinId) {\r\n        setSelectedCoin(coinId);\r\n        setScrollPosition(coinId);\r\n      } else {\r\n        history.push(\"/\");\r\n        setSelectedCoin(\"\");\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCoin) {\r\n      (async function () {\r\n        const coinData = await getSelectedCoinData(selectedCoin);\r\n        setcoinData(coinData);\r\n      })();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n  const handleClick = () => {\r\n    setLoading({\r\n      load: true,\r\n      tip: `Taking you back...`,\r\n    });\r\n    //CHANGE\r\n    setTimeout(() => {\r\n      history.push(\"/\");\r\n      setSearchText(\"\");\r\n      setSelectedCoin(\"\");\r\n    }, 10);\r\n    //\r\n  };\r\n\r\n  return (\r\n    <Col className=\"coinStage\" span={24}>\r\n      {coinData && (\r\n        <Row>\r\n          {isLoading.load && <Spinner tip={isLoading.tip} />}\r\n\r\n          <button onClick={handleClick}>back to Coins</button>\r\n\r\n          <Col xs={{ span: 24 }} sm={{ span: 22, offset: 1 }}>\r\n            <Row className=\"header\" justify=\"start\">\r\n              <Col span={14}>\r\n                <div className=\"headerLeft\">\r\n                  <Avatar size={avatarSize} src={coinData.image?.large} />\r\n\r\n                  <h2 className=\"titleCoin\">\r\n                    {coinData.name} <i>({coinData.symbol?.toUpperCase()})</i>\r\n                  </h2>\r\n                </div>\r\n              </Col>\r\n              <Col span={9} offset={1}>\r\n                <div className=\"headerRight\">\r\n                  <span className=\"currentPrice\">\r\n                    {formatPrice(coinData.market_data.current_price.usd)}\r\n                  </span>\r\n                  <span\r\n                    className={`percent ${\r\n                      coinData.market_data.price_change_percentage_24h >= 0\r\n                        ? \"positive\"\r\n                        : \"negative\"\r\n                    }`}\r\n                  >\r\n                    {formatPercentage(\r\n                      coinData.market_data.price_change_percentage_24h\r\n                    )}\r\n                  </span>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Col md={{ span: 24 }}>\r\n              <Row style={{ alignItems: \"center\", justifyContent: \"center\" }}>\r\n                <Col className=\"leftSide\" xs={{ span: 24 }} sm={{ span: 13 }}>\r\n                  <TagLinks coinData={coinData} />\r\n                </Col>\r\n\r\n                <Col\r\n                  className=\"rightSide\"\r\n                  xs={{ span: 24 }}\r\n                  sm={{ span: 8, offset: 2 }}\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                >\r\n                  <CoinInfo coinData={coinData} />\r\n                </Col>\r\n              </Row>\r\n              <Row justify=\"start\">\r\n                <Col span={24}>\r\n                  <Row>\r\n                    <Col\r\n                      xs={{ span: 22, offset: 1 }}\r\n                      sm={{ span: 23, offset: 1 }}\r\n                      md={{ span: 14, offset: 0 }}\r\n                    >\r\n                      <CoinChart />\r\n                    </Col>\r\n                    <Col\r\n                      xs={{ span: 22, offset: 2 }}\r\n                      sm={{ span: 17, offset: 2 }}\r\n                      md={{ span: 9, offset: 1 }}\r\n                    >\r\n                      <CoinDataTable coinData={coinData} />\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col xs={{ span: 24, offset: 0 }} xl={{ span: 10, offset: 0 }}>\r\n              {parse(`${coinData.description?.en}`)}\r\n            </Col>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </Col>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart.jsx",["113"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo.jsx",["114"],"import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport {\r\n  formatPrice,\r\n  formatPercentage,\r\n  formatNumber,\r\n} from \"../../utils/helpers\";\r\n\r\nexport default function CoinDataTable(props) {\r\n  const { coinData } = props;\r\n\r\n  const typeMoney = formatPrice;\r\n  const typePercent = formatPercentage;\r\n  const typeNumber = formatNumber;\r\n\r\n  const renderInfo = (data, label, convertData) => {\r\n    if (\r\n      (typeof data === \"object\" && !Number(data[0])) ||\r\n      (typeof data !== \"object\" && !Number(data))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <div className=\"tagRow\">\r\n        <div className=\"tagLegend\">{label}</div>\r\n        {typeof data === \"object\" ? (\r\n          <div className=\"info\">\r\n            {convertData(data[0])} / {convertData(data[1])}\r\n          </div>\r\n        ) : (\r\n          <div className=\"info\">{convertData(data)}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Row className=\"coinTableContainer\">\r\n      <Col\r\n        className=\"topRightInfo\"\r\n        sm={{ span: 22, offset: 2 }}\r\n        xs={{ span: 12 }}\r\n      >\r\n        {renderInfo(\r\n          coinData.market_data.market_cap.usd,\r\n          \"Market Cap\",\r\n          typeMoney\r\n        )}\r\n        {renderInfo(\r\n          [coinData.market_data.low_24h.usd, coinData.market_data.high_24h.usd],\r\n          \"24h Low / 24h High\",\r\n          typeMoney\r\n        )}\r\n        {renderInfo(\r\n          coinData.market_data.fully_diluted_valuation.usd,\r\n          \"Fully Diluted Valuation\",\r\n          typeMoney\r\n        )}\r\n      </Col>\r\n      <Col\r\n        className=\"topRightInfo\"\r\n        sm={{ span: 22, offset: 2 }}\r\n        xs={{ span: 12 }}\r\n      >\r\n        {renderInfo(coinData.total_volume, \"24 Hour Trading Vol\", typeMoney)}\r\n        {renderInfo(\r\n          [\r\n            coinData.market_data.circulating_supply,\r\n            coinData.market_data.max_supply,\r\n          ],\r\n          \"Circulating Supply\",\r\n          typeNumber\r\n        )}\r\n        {renderInfo(\r\n          coinData.market_data.total_volume.usd,\r\n          \"24 Hour Trading Vol\",\r\n          typeMoney\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinDataTable.jsx",["115","116","117","118","119","120","121"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { Line } from \"@ant-design/charts\";\r\nimport { getSelectedCoin } from \"../../utils/api\";\r\nimport { formatPrice } from \"../../utils/helpers\";\r\n\r\nexport default function CoinDataTable(props) {\r\n  const [coinDataTable, setCoinDataTab] = useState();\r\n\r\n  {\r\n    /* TABLE\r\n                  BTC Price\t$52,170.13\r\n                      Market Cap\t$972,022,418,270\r\n                      Market Cap Dominance\t60.02%\r\n                      Trading Volume\t$67,427,596,400\r\n                      Volume / Market Cap\t0.0694\r\n                      24h Low / 24h High\t$49,364.64 / $52,547.80\r\n                      7d Low / 7d High\t$46,941.29 / $52,143.68\r\n                      All-Time High\t$52,547.80 -0.7%\r\n                      Feb 17, 2021 (about 8 hours)\r\n                      All-Time Low\t$67.81 76815.4%\r\n                  */\r\n  }\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      if (props.coinData) {\r\n        setCoinDataTab(props.coinData);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {coinDataTable && (\r\n        <div>\r\n          <span>TEXT</span> <span>TEXT</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"122","severity":1,"message":"123","line":2,"column":50,"nodeType":"124","messageId":"125","endLine":2,"endColumn":59},{"ruleId":"122","severity":1,"message":"126","line":10,"column":26,"nodeType":"124","messageId":"125","endLine":10,"endColumn":32},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"122","severity":1,"message":"133","line":14,"column":10,"nodeType":"124","messageId":"125","endLine":14,"endColumn":22},{"ruleId":"122","severity":1,"message":"134","line":15,"column":21,"nodeType":"124","messageId":"125","endLine":15,"endColumn":31},{"ruleId":"127","replacedBy":"135"},{"ruleId":"129","replacedBy":"136"},{"ruleId":"122","severity":1,"message":"137","line":13,"column":10,"nodeType":"124","messageId":"125","endLine":13,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":20,"column":6,"nodeType":"140","endLine":20,"endColumn":8,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":38,"column":6,"nodeType":"140","endLine":38,"endColumn":8,"suggestions":"143"},{"ruleId":"122","severity":1,"message":"144","line":7,"column":10,"nodeType":"124","messageId":"125","endLine":7,"endColumn":22},{"ruleId":"122","severity":1,"message":"145","line":27,"column":26,"nodeType":"124","messageId":"125","endLine":27,"endColumn":43},{"ruleId":"122","severity":1,"message":"146","line":29,"column":9,"nodeType":"124","messageId":"125","endLine":29,"endColumn":12},{"ruleId":"138","severity":1,"message":"147","line":38,"column":6,"nodeType":"140","endLine":38,"endColumn":8,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":45,"column":6,"nodeType":"140","endLine":45,"endColumn":20,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":49,"column":9,"nodeType":"153","messageId":"154","endLine":49,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":134,"column":33,"nodeType":"157","messageId":"158","endLine":134,"endColumn":40},{"ruleId":"155","severity":1,"message":"156","line":147,"column":33,"nodeType":"157","messageId":"158","endLine":147,"endColumn":40},{"ruleId":"122","severity":1,"message":"159","line":26,"column":10,"nodeType":"124","messageId":"125","endLine":26,"endColumn":20},{"ruleId":"122","severity":1,"message":"160","line":27,"column":10,"nodeType":"124","messageId":"125","endLine":27,"endColumn":24},{"ruleId":"138","severity":1,"message":"161","line":45,"column":16,"nodeType":"162","endLine":45,"endColumn":56},{"ruleId":"122","severity":1,"message":"163","line":13,"column":24,"nodeType":"124","messageId":"125","endLine":13,"endColumn":39},{"ruleId":"122","severity":1,"message":"164","line":13,"column":9,"nodeType":"124","messageId":"125","endLine":13,"endColumn":20},{"ruleId":"122","severity":1,"message":"165","line":3,"column":27,"nodeType":"124","messageId":"125","endLine":3,"endColumn":37},{"ruleId":"122","severity":1,"message":"166","line":4,"column":10,"nodeType":"124","messageId":"125","endLine":4,"endColumn":27},{"ruleId":"122","severity":1,"message":"167","line":5,"column":10,"nodeType":"124","messageId":"125","endLine":5,"endColumn":14},{"ruleId":"122","severity":1,"message":"168","line":6,"column":10,"nodeType":"124","messageId":"125","endLine":6,"endColumn":25},{"ruleId":"122","severity":1,"message":"169","line":7,"column":10,"nodeType":"124","messageId":"125","endLine":7,"endColumn":21},{"ruleId":"170","severity":1,"message":"171","line":12,"column":3,"nodeType":"172","messageId":"173","endLine":25,"endColumn":4},{"ruleId":"138","severity":1,"message":"174","line":33,"column":6,"nodeType":"140","endLine":33,"endColumn":8,"suggestions":"175"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Footer' is assigned a value but never used.","no-native-reassign",["176"],"no-negated-in-lhs",["177"],["176"],["177"],"'selectedCoin' is assigned a value but never used.","'setLoading' is assigned a value but never used.",["176"],["177"],"'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array.","ArrayExpression",["178"],"React Hook useEffect has missing dependencies: 'numOfPages', 'selectedCoin', 'setLoading', and 'setnumOfPages'. Either include them or remove the dependency array.",["179"],"'CurrencyCard' is defined but never used.","'setScrollPosition' is assigned a value but never used.","'tip' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'numOfPages', 'setLoading', and 'setnumOfPages'. Either include them or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'scrollPosition' and 'setLoading'. Either include them or remove the dependency array.",["181"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'searchText' is assigned a value but never used.","'scrollPosition' is assigned a value but never used.","Assignments to the 'urlSlice' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'setSelectedCoin' is assigned a value but never used.","'typePercent' is assigned a value but never used.","'useContext' is defined but never used.","'stateCoinsContext' is defined but never used.","'Line' is defined but never used.","'getSelectedCoin' is defined but never used.","'formatPrice' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'props.coinData'. Either include it or remove the dependency array. If 'setCoinDataTab' needs the current value of 'props.coinData', you can also switch to useReducer instead of useState and read 'props.coinData' in the reducer.",["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: [setLoading]",{"range":"193","text":"194"},"Update the dependencies array to be: [numOfPages, selectedCoin, setLoading, setnumOfPages]",{"range":"195","text":"196"},"Update the dependencies array to be: [numOfPages, setLoading, setnumOfPages]",{"range":"197","text":"198"},"Update the dependencies array to be: [scrollPosition, selectedCoin, setLoading]",{"range":"199","text":"200"},"Update the dependencies array to be: [props.coinData]",{"range":"201","text":"202"},[642,644],"[setLoading]",[1168,1170],"[numOfPages, selectedCoin, setLoading, setnumOfPages]",[1240,1242],"[numOfPages, setLoading, setnumOfPages]",[1399,1413],"[scrollPosition, selectedCoin, setLoading]",[1136,1138],"[props.coinData]"]