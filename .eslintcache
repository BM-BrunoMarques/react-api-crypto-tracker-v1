[{"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js":"1","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js":"2","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js":"3","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx":"4","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx":"5","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js":"6","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx":"7","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js":"8","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\renderCoinInfo.jsx":"9","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinBottomInfo.jsx":"10","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinTopInfo.jsx":"11","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart\\CoinChart.jsx":"12","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks\\TagLinks.jsx":"13","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\CoinsHomeListing.jsx":"14","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.jsx":"15","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\TableScroll\\TableScroll.jsx":"16"},{"size":2687,"mtime":1614543643098,"results":"17","hashOfConfig":"18"},{"size":1862,"mtime":1614368711531,"results":"19","hashOfConfig":"18"},{"size":218,"mtime":1612069310889,"results":"20","hashOfConfig":"18"},{"size":275,"mtime":1614016379932,"results":"21","hashOfConfig":"18"},{"size":781,"mtime":1613277189129,"results":"22","hashOfConfig":"18"},{"size":1431,"mtime":1614544543285,"results":"23","hashOfConfig":"18"},{"size":6161,"mtime":1614541946737,"results":"24","hashOfConfig":"18"},{"size":821,"mtime":1614543509228,"results":"25","hashOfConfig":"18"},{"size":1699,"mtime":1614541618788,"results":"26","hashOfConfig":"18"},{"size":2842,"mtime":1614544304157,"results":"27","hashOfConfig":"18"},{"size":1966,"mtime":1614541657221,"results":"28","hashOfConfig":"18"},{"size":2857,"mtime":1614542195674,"results":"29","hashOfConfig":"18"},{"size":5024,"mtime":1614544432618,"results":"30","hashOfConfig":"18"},{"size":2252,"mtime":1614544489183,"results":"31","hashOfConfig":"18"},{"size":2285,"mtime":1614544568297,"results":"32","hashOfConfig":"18"},{"size":6164,"mtime":1614544519002,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"phcpdk",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js",[],["69","70"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx",["71","72"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport { formatPrice, formatPercentage } from \"../../utils/helpers\";\r\nimport React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { Spinner } from \"../loadingSpinner/Spinner\";\r\nimport { Avatar, Row, Col } from \"antd\";\r\nimport { getSelectedCoinData } from \"../../utils/api\";\r\nimport parse from \"html-react-parser\";\r\nimport TagLinks from \"./TagLinks/TagLinks\";\r\nimport CoinChart from \"./CoinChart/CoinChart\";\r\nimport CoinTopInfo from \"./CoinInfo/CoinTopInfo\";\r\nimport CoinBottomInfo from \"./CoinInfo/CoinBottomInfo\";\r\n\r\nexport default function Coin(props) {\r\n  const { selectedCoinC, isLoadingC, scrollPositionC } = useContext(\r\n    stateCoinsContext\r\n  );\r\n\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [, setScrollPosition] = scrollPositionC;\r\n\r\n  const [coinData, setcoinData] = useState();\r\n  const history = useHistory();\r\n\r\n  const { coinId } = props.history.location;\r\n\r\n  const avatarSize = {\r\n    xs: 40,\r\n    sm: 40,\r\n    md: 40,\r\n    lg: 64,\r\n    xl: 80,\r\n    xxl: 80,\r\n  };\r\n\r\n  let urlSlice = \"\";\r\n  useEffect(() => {\r\n    urlSlice = props.location.pathname.split(\"/\").pop();\r\n    if (!selectedCoin || selectedCoin !== urlSlice) {\r\n      if (urlSlice !== \"/coin\") {\r\n        setSelectedCoin(urlSlice);\r\n        setScrollPosition(urlSlice);\r\n      } else if (!coinId) {\r\n        setSelectedCoin(coinId);\r\n        setScrollPosition(coinId);\r\n      } else {\r\n        history.push(\"/\");\r\n        setSelectedCoin(\"\");\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCoin) {\r\n      (async function () {\r\n        const coinData = await getSelectedCoinData(selectedCoin);\r\n        setcoinData(coinData);\r\n        setLoading(false);\r\n      })();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n  console.log(\"COINDATA :  \", coinData);\r\n  return (\r\n    <Col className=\"coinStage\" span={24}>\r\n      <div className=\"coinWrap\">\r\n        {coinData && (\r\n          <Row>\r\n            {isLoading.load && <Spinner tip={isLoading.tip} />}\r\n            <Col\r\n              xs={{ span: 24 }}\r\n              sm={{ span: 22, offset: 1 }}\r\n              md={{ span: 23, offset: 1 }}\r\n            >\r\n              <Row className=\"header\" justify=\"start\">\r\n                <Col span={14}>\r\n                  <div className=\"headerLeft\">\r\n                    <Avatar size={avatarSize} src={coinData.image?.large} />\r\n\r\n                    <h2 className=\"titleCoin\">\r\n                      {coinData.name} <i>({coinData.symbol?.toUpperCase()})</i>\r\n                    </h2>\r\n                  </div>\r\n                </Col>\r\n                <Col span={9} offset={1}>\r\n                  <div className=\"headerRight\">\r\n                    <span className=\"currentPrice\">\r\n                      {formatPrice(coinData.market_data.current_price.usd)}\r\n                    </span>\r\n                    <span\r\n                      className={`percent ${\r\n                        coinData.market_data.price_change_percentage_24h >= 0\r\n                          ? \"positive\"\r\n                          : \"negative\"\r\n                      }`}\r\n                    >\r\n                      {formatPercentage(\r\n                        coinData.market_data.price_change_percentage_24h\r\n                      )}\r\n                    </span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Col md={{ span: 22, offset: 1 }}>\r\n                <Row style={{ alignItems: \"center\", justifyContent: \"center\" }}>\r\n                  <Col className=\"leftSide\" xs={{ span: 24 }} sm={{ span: 13 }}>\r\n                    <TagLinks coinData={coinData} />\r\n                  </Col>\r\n\r\n                  <Col\r\n                    className=\"rightSide\"\r\n                    xs={{ span: 24 }}\r\n                    sm={{ span: 8, offset: 2 }}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <CoinTopInfo coinData={coinData} />\r\n                  </Col>\r\n                </Row>\r\n                <Row style={{ marginTop: \"40px\" }} justify=\"start\">\r\n                  <Col span={24}>\r\n                    <Row>\r\n                      <Col\r\n                        xs={{ span: 22, offset: 1 }}\r\n                        sm={{ span: 23, offset: 1 }}\r\n                        md={{ span: 13, offset: 0 }}\r\n                      >\r\n                        <CoinChart />\r\n                      </Col>\r\n                      <Col\r\n                        xs={{ span: 24, offset: 0 }}\r\n                        sm={{ span: 20, offset: 3 }}\r\n                        md={{ span: 10, offset: 1 }}\r\n                        lg={{ span: 8, offset: 3 }}\r\n                      >\r\n                        <CoinBottomInfo\r\n                          coinData={coinData}\r\n                          selectedCoin={selectedCoin}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              {coinData.description.en && (\r\n                <Row justify=\"center\">\r\n                  <Col\r\n                    xs={{ span: 24, offset: 0 }}\r\n                    md={{ span: 22, offset: 1 }}\r\n                    xl={{ span: 17, offset: 0 }}\r\n                  >\r\n                    <div className=\"description\">\r\n                      <div className=\"title\">\r\n                        <Avatar size={50} src={coinData.image?.large} />\r\n                        {`About ${coinData.name}:`}\r\n                      </div>\r\n                      <div className=\"text\">\r\n                        <div className=\"textWrap\">\r\n                          {parse(`${coinData.description?.en}`)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\renderCoinInfo.jsx",["73"],"import { months } from \"../../../utils/const\";\r\nimport {formatDate} from \"../../../utils/helpers\"\r\n\r\nexport const renderCoinInfo = ({ data, label, type, addClass, separator }) => {\r\n  const addClassCategory = (data) => {\r\n    const classes = [];\r\n    classes.push(data.includes(\"-\") ? \"negative \" : \"\");\r\n    classes.push(data.includes(\"%\") ? \"percent \" : \"\");\r\n    classes.push(data.includes(\"$\") ? \"currency \" : \"\");\r\n    const classDate = () => {\r\n      for (let month of months) {\r\n        if (data.includes(month)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    classes.push(classDate() ? \"date\" : \"\");\r\n    classes.push();\r\n    return classes.join(\"\").toString();\r\n  };\r\n\r\n  const convertedData = [];\r\n  const multiple = typeof data === \"object\" ? true : false;\r\n\r\n  if (multiple) {\r\n    data.map((data, indx) => {\r\n      let converted;\r\n      if (type[indx] === formatDate) {\r\n        const { month, day, year } = type[indx](data);\r\n        converted = `${day} ${months[month - 1]} ${year}`;\r\n      } else {\r\n        converted = type[indx](data);\r\n      }\r\n      convertedData.push(converted);\r\n    });\r\n  } else {\r\n    convertedData.push(type(data));\r\n  }\r\n\r\n  return (\r\n    <div key={label} className=\"tagRow\">\r\n      <div className=\"tagLegend\">{label}</div>\r\n      <div className={`info ${addClass}`}>\r\n        {convertedData.map((data, indx) => (\r\n          <span\r\n            key={`${addClass}${label}${indx ** 2}`}\r\n            className={`${addClassCategory(data)}`}\r\n          >\r\n            {data}\r\n            {separator && <span className=\"separator\">{separator[indx]}</span>}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinBottomInfo.jsx",["74","75"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinTopInfo.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart\\CoinChart.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks\\TagLinks.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\CoinsHomeListing.jsx",["76","77"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\TableScroll\\TableScroll.jsx",["78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":41,"column":16,"nodeType":"85","endLine":41,"endColumn":56},{"ruleId":"83","severity":1,"message":"86","line":64,"column":6,"nodeType":"87","endLine":64,"endColumn":20,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":28,"column":27,"nodeType":"91","messageId":"92","endLine":28,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":19,"column":16,"nodeType":"95","messageId":"96","endLine":19,"endColumn":17},{"ruleId":"83","severity":1,"message":"97","line":91,"column":6,"nodeType":"87","endLine":91,"endColumn":22,"suggestions":"98"},{"ruleId":"83","severity":1,"message":"99","line":38,"column":6,"nodeType":"87","endLine":38,"endColumn":8,"suggestions":"100"},{"ruleId":"83","severity":1,"message":"101","line":44,"column":6,"nodeType":"87","endLine":44,"endColumn":20,"suggestions":"102"},{"ruleId":"83","severity":1,"message":"86","line":23,"column":6,"nodeType":"87","endLine":23,"endColumn":8,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","Assignments to the 'urlSlice' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array.","ArrayExpression",["106"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has missing dependencies: 'bottomInfoData', 'constructData', and 'dataArr'. Either include them or remove the dependency array.",["107"],"React Hook useEffect has missing dependencies: 'fetchData', 'fetchDataFunction', 'numOfPages', and 'setnumOfPages'. Either include them or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'scrollPosition'. Either include it or remove the dependency array.",["109"],["110"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [selectedCoin, setLoading]",{"range":"121","text":"122"},"Update the dependencies array to be: [bottomInfoData, constructData, dataArr, props.coinData]",{"range":"123","text":"124"},"Update the dependencies array to be: [fetchData, fetchDataFunction, numOfPages, setnumOfPages]",{"range":"125","text":"126"},"Update the dependencies array to be: [scrollPosition, selectedCoin]",{"range":"127","text":"128"},"Update the dependencies array to be: [setLoading]",{"range":"129","text":"130"},[1901,1915],"[selectedCoin, setLoading]",[2531,2547],"[bottomInfoData, constructData, dataArr, props.coinData]",[1192,1194],"[fetchData, fetchDataFunction, numOfPages, setnumOfPages]",[1327,1341],"[scrollPosition, selectedCoin]",[741,743],"[setLoading]"]