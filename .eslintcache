[{"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js":"1","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js":"2","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\params.js":"3","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js":"4","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.js":"5","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx":"6","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CurrencyCard\\CurrencyCard.jsx":"7","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx":"8","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\TableScroll\\TableScroll.jsx":"9","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js":"10","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\coinsHomeListing.js":"11","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing.js":"12","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks.jsx":"13","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx":"14","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart.jsx":"15","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js":"16","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo.jsx":"17","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinBottomInfo.jsx":"18"},{"size":2549,"mtime":1614150011558,"results":"19","hashOfConfig":"20"},{"size":2975,"mtime":1614207229426,"results":"21","hashOfConfig":"20"},{"size":53,"mtime":1612069310891,"results":"22","hashOfConfig":"20"},{"size":218,"mtime":1612069310889,"results":"23","hashOfConfig":"20"},{"size":1643,"mtime":1614048492949,"results":"24","hashOfConfig":"20"},{"size":275,"mtime":1614016379932,"results":"25","hashOfConfig":"20"},{"size":559,"mtime":1612987998476,"results":"26","hashOfConfig":"20"},{"size":781,"mtime":1613277189129,"results":"27","hashOfConfig":"20"},{"size":6473,"mtime":1614048348963,"results":"28","hashOfConfig":"20"},{"size":3186,"mtime":1614136137053,"results":"29","hashOfConfig":"20"},{"size":2501,"mtime":1613280329088,"results":"30","hashOfConfig":"20"},{"size":2662,"mtime":1614208476743,"results":"31","hashOfConfig":"20"},{"size":5116,"mtime":1614054127092,"results":"32","hashOfConfig":"20"},{"size":6038,"mtime":1614148786854,"results":"33","hashOfConfig":"20"},{"size":2956,"mtime":1614129459506,"results":"34","hashOfConfig":"20"},{"size":759,"mtime":1614123852321,"results":"35","hashOfConfig":"20"},{"size":1592,"mtime":1614056518928,"results":"36","hashOfConfig":"20"},{"size":2869,"mtime":1614131069072,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"phcpdk",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js",[],["84","85"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\params.js",[],["86","87"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.js",["88","89","90"],"import \"../App.css\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { getAllCoinsList } from \"../utils/api\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { Sorter } from \"./AutoComplete/Sorter\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { stateCoinsContext } from \"./App\";\r\n\r\nexport default function SearchBar(props) {\r\n  //useContext\r\n  const { selectedCoinC, isLoadingC, searchTextC } = useContext(\r\n    stateCoinsContext\r\n  );\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [searchText, setSearchText] = searchTextC;\r\n  //useState\r\n  const [searchCoins, setCoins] = useState([]);\r\n  const [searchOptions, setOptions] = useState([]);\r\n  const history = useHistory();\r\n\r\n  //Hooks\r\n  useEffect(() => {\r\n    getAllCoinsList().then((coins) => {\r\n      setCoins(coins);\r\n    });\r\n  }, []);\r\n\r\n  const onSelect = (data) => {\r\n    setSelectedCoin(data);\r\n    history.push({\r\n      pathname: \"/coin/\" + data,\r\n    });\r\n    setSearchText('');\r\n  };\r\n\r\n  const onSearch = (searchText) => {\r\n    setSearchText(searchText);\r\n    const filteredOptions = Sorter(searchCoins, searchText);\r\n    setOptions(filteredOptions);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {searchCoins && (\r\n        <div>\r\n          <AutoComplete\r\n            placeholder='Looking for a specific coin?'\r\n            value={searchText}\r\n            options={searchOptions || []}\r\n            onSelect={onSelect}\r\n            onSearch={onSearch}\r\n            backfill={true}\r\n            style={{ width: \"200px\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CurrencyCard\\CurrencyCard.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\TableScroll\\TableScroll.jsx",["91","92","93","94","95"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Table, Avatar } from \"antd\";\r\nimport { TinyLine } from \"@ant-design/charts\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { formatPrice, formatPercentage } from \"../../utils/helpers\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Row as AntdRow, Col as AntdCol } from \"antd\";\r\nimport { StickyTable, Row, Cell } from \"react-sticky-table\";\r\n\r\nimport \"./TableScroll.css\";\r\n\r\nexport default function TableScroll(props) {\r\n  const { stateCoinsC, isLoadingC } = useContext(stateCoinsContext);\r\n  const [stateValues] = stateCoinsC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setLoading({\r\n      load: false,\r\n    });\r\n  }, []);\r\n\r\n  const config = {\r\n    height: 60,\r\n    width: 80,\r\n    autoFit: false,\r\n    smooth: false,\r\n    passive: false,\r\n\r\n    lineStyle: {\r\n      stroke: \"blue\",\r\n      lineWidth: 1,\r\n      lineDash: [1, 1],\r\n      strokeOpacity: 0.7,\r\n      shadowColor: \"black\",\r\n      shadowBlur: 10,\r\n      shadowOffsetX: 5,\r\n      shadowOffsetY: 5,\r\n    },\r\n    tooltip: {\r\n      formatter: (data) => {\r\n        return data.y;\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = {\r\n    coin: {\r\n      title: \"Coin\",\r\n      key: [\"image\", \"name\"],\r\n      render: (record) => {\r\n        const id = \"coin\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <div style={{ display: \"flex\", maxWidth: \"130px\" }}>\r\n            <Avatar size=\"normal\" src={record[key[0]]} />\r\n            <span className=\"title\">{record[key[1]]}</span>\r\n            <div\r\n              style={{ position: \" absolute\", top: \"-35px\" }}\r\n              id={record.id}\r\n            ></div>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    symbol: {\r\n      title: \"\",\r\n      key: \"symbol\",\r\n      render: (record) => {\r\n        const id = \"symbol\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span style={{ maxWidth: \"80px\", display: \"inline-block\" }}>\r\n            {record[key].toUpperCase()}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    current_price: {\r\n      title: \"Price\",\r\n      key: \"current_price\",\r\n      render: (record) => {\r\n        const id = \"current_price\";\r\n        const key = columns[id].key;\r\n        return <span>{formatPrice(record[key])}</span>;\r\n      },\r\n    },\r\n    price_change_percentage_1h_in_currency: {\r\n      title: \"1h\",\r\n      key: \"price_change_percentage_1h_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_1h_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    price_change_percentage_24h_in_currency: {\r\n      title: \"24h\",\r\n      key: \"price_change_percentage_24h_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_24h_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    price_change_percentage_7d_in_currency: {\r\n      title: \"7d\",\r\n      key: \"price_change_percentage_7d_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_7d_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    sparkline_in_7d: {\r\n      title: \"Last 7 Days\",\r\n      key: \"sparkline_in_7d\",\r\n      render: (record) => {\r\n        const id = \"sparkline_in_7d\";\r\n        const key = columns[id].key;\r\n        return <TinyLine data={record[key].price} {...config} />;\r\n      },\r\n    },\r\n\r\n    // {\r\n    //   title: \"Last 7 Days\",\r\n    //   dataIndex: \"sparkline_in_7d\",\r\n    //   key: \"sparkline_in_7d\",\r\n    //   align: \"center\",\r\n    //   width: 100,\r\n    //   height: 60,\r\n    //   render: ({ price }) => {\r\n    //     // const dataMod = price.map((price) => price.toFixed(4));\r\n    //     // <MiniChart dataSet={price}/>\r\n    //\r\n    //     // const sparklinePrices = sparkline.price.map((price, indx) => ({\r\n    //     //   day: Math.round(indx * 100 / sparkline.price.length),\r\n    //     //   value: Math.ceil(price),\r\n    //     // }));\r\n    //     // return <Line data={sparklinePrices} {...config} />;\r\n    //   },\r\n    // },\r\n  };\r\n\r\n  const renderHeader = () => (\r\n    <Row>\r\n      {Object.values(columns).map((column, ind) => (\r\n        <Cell className=\"stickyBG\" id={`${column.title}${ind}`}>\r\n          {column.title}\r\n        </Cell>\r\n      ))}\r\n    </Row>\r\n  );\r\n\r\n  const renderRows = (data, ind) => (\r\n    <Row\r\n      className=\"coinRow\"\r\n      style={{ zIndex: \"3\" }}\r\n      key={`${data.id}${ind}`}\r\n      onClick={() => {\r\n        setLoading({\r\n          load: true,\r\n          tip: `Loading Coin!`,\r\n        });\r\n        //timeout\r\n        history.push(`/coin/${data.id}`);\r\n      }}\r\n    >\r\n      <Cell className=\"stickyBG\" style={{ zIndex: \"2\" }}>\r\n        {columns.coin.render(data)}\r\n      </Cell>\r\n      <Cell>{columns.symbol.render(data)}</Cell>\r\n      <Cell>{columns.current_price.render(data)}</Cell>\r\n      <Cell>{columns.price_change_percentage_1h_in_currency.render(data)}</Cell>\r\n      <Cell>\r\n        {columns.price_change_percentage_24h_in_currency.render(data)}\r\n      </Cell>\r\n      <Cell>{columns.price_change_percentage_7d_in_currency.render(data)}</Cell>\r\n      <Cell>{columns.sparkline_in_7d.render(data)}</Cell>\r\n    </Row>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {stateValues.coins && (\r\n        // <AntdRow>\r\n        <StickyTable>\r\n          {renderHeader()}\r\n          {stateValues.coins.map((data, ind) => renderRows(data, ind))}\r\n        </StickyTable>\r\n        // </AntdRow>\r\n      )}\r\n      {/* <Table\r\n        onRow={(record) => {\r\n          return {\r\n            , // click row\r\n          };\r\n        }}\r\n        pagination={false}\r\n        columns={columns}\r\n        dataSource={stateValues.coins}\r\n        rowKey={(record, indx) => `${record.id}${indx}`}\r\n        sticky={true}\r\n        scroll={{ x: \"max-content\" }}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js",["96"],"import { months } from \"./const\";\r\n\r\nexport const formatPrice = (price) => {\r\n  console.log(\"formatPrice\", price);\r\n  if (!Number(price)) {\r\n    return \"?\";\r\n  }\r\n  const formatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n    minimumFractionDigits: 2,\r\n  });\r\n\r\n  let currency;\r\n  let numberString = formatter\r\n    .formatToParts(price)\r\n    .map(({ type, value }) => {\r\n      switch (type) {\r\n        case \"currency\": {\r\n          currency = value;\r\n          return \"\";\r\n        }\r\n        default:\r\n          return value;\r\n      }\r\n    })\r\n    .reduce((string, part) => string + part);\r\n\r\n  const decimalsOverZero = numberString.split(\".\")[1] === \"00\";\r\n\r\n  if (decimalsOverZero) {\r\n    numberString = numberString.substring(0, numberString.length - 3);\r\n  }\r\n\r\n  return `${currency}${numberString}`;\r\n};\r\n\r\nexport const formatNumber = (number) => {\r\n  return new Intl.NumberFormat().format(number);\r\n};\r\n\r\nexport const formatPercentage = (data) => {\r\n  if (!Number(data)) {\r\n    return \"?\";\r\n  }\r\n\r\n  return parseFloat(data).toFixed(1).concat(\"%\");\r\n};\r\n\r\nexport const formatDate = (data) => {\r\n  const dateConverted = new Date(data[0]);\r\n\r\n  const month = dateConverted.getMonth() + 1;\r\n  const day = dateConverted.getDate();\r\n  const year = dateConverted.getFullYear();\r\n  const hour = dateConverted.getHours();\r\n  const minute = dateConverted.getMinutes();\r\n\r\n  return { month, day, year, hour, minute };\r\n};\r\n\r\nexport const renderInfo = (data, label, convertData) => {\r\n  if (\r\n    (typeof data === \"object\" && !Number(data[0])) ||\r\n    (typeof data !== \"object\" && !Number(data))\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <div className=\"tagRow\">\r\n      <div className=\"tagLegend\">{label}</div>\r\n      {typeof data === \"object\" ? (\r\n        <div className=\"info\">\r\n          {convertData(data[0])} / {convertData(data[1])}\r\n        </div>\r\n      ) : (\r\n        <div className=\"info\">{convertData(data)}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const renderBottomInfo = ({ data, label, type, addClass }) => {\r\n  const addClassCategory = (data) => {\r\n    const classes = [];\r\n    classes.push(data.includes(\"-\") ? \"negative \" : \"\");\r\n    classes.push(data.includes(\"%\") ? \"percent \" : \"\");\r\n    classes.push(data.includes(\"$\") ? \"currency \" : \"\");\r\n\r\n    return classes.join(\"\").toString();\r\n  };\r\n\r\n  const convertedData = [];\r\n  const multiple = typeof data === \"object\" ? true : false;\r\n\r\n  if (multiple) {\r\n    data.map((data, indx) => {\r\n      let converted;\r\n      if (type[indx] === formatDate) {\r\n        const { month, day, year } = type[indx](data);\r\n        converted = `${day} ${months[month - 1]} ${year}`;\r\n      } else {\r\n        converted = type[indx](data);\r\n      }\r\n      convertedData.push(converted);\r\n      console.log(\"converted\", converted);\r\n    });\r\n  } else {\r\n    convertedData.push(type(data));\r\n  }\r\n\r\n  return (\r\n    <div className=\"tagRow\">\r\n      <div className=\"tagLegend\">{label}</div>\r\n      <div className={`info ${addClass}`}>\r\n        {convertedData.map((data) => (\r\n          <span className={`${addClassCategory(data)}`}>{data}</span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\coinsHomeListing.js",["97"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing.js",["98","99","100","101","102"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks.jsx",["103","104","105"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport React from \"react\";\r\nimport { Tag } from \"antd\";\r\nimport {\r\n  TwitterOutlined,\r\n  FacebookOutlined,\r\n  RedditOutlined,\r\n  SendOutlined,\r\n  CodeSandboxOutlined,\r\n  GithubOutlined,\r\n  LinkOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { colors } from \"../../utils/const\";\r\n\r\nexport default function TagLinks(props) {\r\n  const { coinData } = props;\r\n  const { facebook, reddit, twitter, telegram, repos, blueGray } = colors;\r\n\r\n  const renderItemLink = (item, color, icon) => {\r\n    if (!item) return;\r\n    let url, itemName;\r\n    if (item.length) {\r\n      url = new URL(item);\r\n      const itemSplit = url.hostname.split(\".\");\r\n\r\n      itemName = itemSplit[Math.floor((itemSplit.length - 1) / 2)];\r\n    }\r\n    return item?.length ? (\r\n      <Tag key={url} icon={icon} color={color}>\r\n        <a href={item}>{itemName}</a>\r\n      </Tag>\r\n    ) : null;\r\n  };\r\n\r\n  const checkForContent = (section) => {\r\n    switch (section) {\r\n      case \"social\":\r\n        if (\r\n          coinData.links.subreddit_url?.length ||\r\n          coinData.links.twitter_screen_name?.length ||\r\n          coinData.links.facebook_username?.length ||\r\n          coinData.links.telegram_channel_identifier?.length ||\r\n          coinData.links.official_forum_url[0]\r\n        ) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tagLinks\">\r\n      {coinData.coingecko_rank && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Rank</div>\r\n          <div className=\"tagsContainer\">\r\n            <Tag className=\"rank\">Rank #{coinData.coingecko_rank}</Tag>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {coinData.links.homepage[0] && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Website</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.homepage.map((item) => renderItemLink(item))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {coinData.links.blockchain_site[0] && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Explorers</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.blockchain_site.map((item) => renderItemLink(item))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {checkForContent(\"social\") && (\r\n        <div className=\"tagRow social\">\r\n          <div className=\"tagLegend\">Community</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.subreddit_url && (\r\n              <Tag icon={<RedditOutlined />} color={reddit}>\r\n                <a href={coinData.links.subreddit_url}>Reddit</a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.twitter_screen_name && (\r\n              <Tag icon={<TwitterOutlined />} color={twitter}>\r\n                <a\r\n                  href={`https://twitter.com/${coinData.links.twitter_screen_name}`}\r\n                >\r\n                  Twitter\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.facebook_username && (\r\n              <Tag icon={<FacebookOutlined />} color={facebook}>\r\n                <a\r\n                  href={`https://facebook.com/${coinData.links.facebook_username}`}\r\n                >\r\n                  Facebook\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.telegram_channel_identifier && (\r\n              <Tag icon={<SendOutlined />} color={telegram}>\r\n                <a\r\n                  href={`https://t.me/${coinData.links.telegram_channel_identifier}`}\r\n                >\r\n                  Telegram\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.official_forum_url &&\r\n              coinData.links.homepage.map((item) =>\r\n                renderItemLink(item, blueGray, <LinkOutlined />)\r\n              )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {(coinData.links.repos_url.github[0] ||\r\n        coinData.links.repos_url.bitbucket[0]) && (\r\n        <div className=\"tagRow repos\">\r\n          <div className=\"tagLegend\">\r\n            <span>Source Code</span>\r\n          </div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.repos_url.github.map((item, indx) => {\r\n              if (!item.length) return;\r\n\r\n              return (\r\n                <Tag\r\n                  key={`${item} ${indx}`}\r\n                  icon={<GithubOutlined />}\r\n                  color={repos}\r\n                >\r\n                  <a href={item}>Github</a>\r\n                </Tag>\r\n              );\r\n            })}\r\n            {coinData.links.repos_url.bitbucket.map((item) => {\r\n              if (!item.length) return;\r\n\r\n              return (\r\n                <Tag\r\n                  icon={<CodeSandboxOutlined />}\r\n                  className=\"forum\"\r\n                  color={repos}\r\n                >\r\n                  <a href={item}>Bitbucket</a>\r\n                </Tag>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx",["106","107","108","109"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport { formatPrice, formatPercentage } from \"../../utils/helpers\";\r\nimport React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { Spinner } from \"../loadingSpinner/Spinner\";\r\nimport { Avatar, Row, Col } from \"antd\";\r\nimport { getSelectedCoinData } from \"../../utils/api\";\r\nimport parse from \"html-react-parser\";\r\nimport TagLinks from \"./TagLinks\";\r\nimport CoinChart from \"./CoinChart\";\r\nimport CoinInfo from \"./CoinInfo\";\r\nimport CoinBottomInfo from \"./CoinBottomInfo\";\r\n\r\nexport default function Coin(props) {\r\n  const {\r\n    selectedCoinC,\r\n    isLoadingC,\r\n    searchTextC,\r\n    scrollPositionC,\r\n  } = useContext(stateCoinsContext);\r\n\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [searchText, setSearchText] = searchTextC;\r\n  const [scrollPosition, setScrollPosition] = scrollPositionC;\r\n\r\n  const [coinData, setcoinData] = useState();\r\n  const history = useHistory();\r\n\r\n  const { coinId } = props.history.location;\r\n\r\n  const avatarSize = {\r\n    xs: 40,\r\n    sm: 40,\r\n    md: 40,\r\n    lg: 64,\r\n    xl: 80,\r\n    xxl: 80,\r\n  };\r\n\r\n  let urlSlice = \"\";\r\n  useEffect(() => {\r\n    urlSlice = props.location.pathname.split(\"/\").pop();\r\n    if (!selectedCoin || selectedCoin !== urlSlice) {\r\n      if (urlSlice !== \"/coin\") {\r\n        setSelectedCoin(urlSlice);\r\n        setScrollPosition(urlSlice);\r\n      } else if (!coinId) {\r\n        setSelectedCoin(coinId);\r\n        setScrollPosition(coinId);\r\n      } else {\r\n        history.push(\"/\");\r\n        setSelectedCoin(\"\");\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCoin) {\r\n      (async function () {\r\n        const coinData = await getSelectedCoinData(selectedCoin);\r\n        setcoinData(coinData);\r\n        setLoading(false);\r\n      })();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n  const handleClick = () => {\r\n    (async function () {\r\n      setLoading({\r\n        load: true,\r\n        tip: `Taking you back...`,\r\n      });\r\n      //timeout\r\n      history.push(\"/\");\r\n      setSearchText(\"\");\r\n      setSelectedCoin(\"\");\r\n    })();\r\n  };\r\n\r\n  return (\r\n    <Col className=\"coinStage\" span={24}>\r\n      <button onClick={handleClick}>back to Coins</button>\r\n      <div className=\"coinWrap\">\r\n        {coinData && (\r\n          <Row>\r\n            {isLoading.load && <Spinner tip={isLoading.tip} />}\r\n            <Col\r\n              xs={{ span: 24 }}\r\n              sm={{ span: 22, offset: 1 }}\r\n              md={{ span: 23, offset: 1 }}\r\n            >\r\n              <Row className=\"header\" justify=\"start\">\r\n                <Col span={14}>\r\n                  <div className=\"headerLeft\">\r\n                    <Avatar size={avatarSize} src={coinData.image?.large} />\r\n\r\n                    <h2 className=\"titleCoin\">\r\n                      {coinData.name} <i>({coinData.symbol?.toUpperCase()})</i>\r\n                    </h2>\r\n                  </div>\r\n                </Col>\r\n                <Col span={9} offset={1}>\r\n                  <div className=\"headerRight\">\r\n                    <span className=\"currentPrice\">\r\n                      {formatPrice(coinData.market_data.current_price.usd)}\r\n                    </span>\r\n                    <span\r\n                      className={`percent ${\r\n                        coinData.market_data.price_change_percentage_24h >= 0\r\n                          ? \"positive\"\r\n                          : \"negative\"\r\n                      }`}\r\n                    >\r\n                      {formatPercentage(\r\n                        coinData.market_data.price_change_percentage_24h\r\n                      )}\r\n                    </span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Col md={{ span: 22, offset: 1 }}>\r\n                <Row style={{ alignItems: \"center\", justifyContent: \"center\" }}>\r\n                  <Col className=\"leftSide\" xs={{ span: 24 }} sm={{ span: 13 }}>\r\n                    <TagLinks coinData={coinData} />\r\n                  </Col>\r\n\r\n                  <Col\r\n                    className=\"rightSide\"\r\n                    xs={{ span: 24 }}\r\n                    sm={{ span: 8, offset: 2 }}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <CoinInfo coinData={coinData} />\r\n                  </Col>\r\n                </Row>\r\n                <Row style={{ marginTop: \"40px\" }} justify=\"start\">\r\n                  <Col span={24}>\r\n                    <Row>\r\n                      <Col\r\n                        xs={{ span: 22, offset: 1 }}\r\n                        sm={{ span: 23, offset: 1 }}\r\n                        md={{ span: 13, offset: 0 }}\r\n                      >\r\n                        <CoinChart />\r\n                      </Col>\r\n                      <Col\r\n                        xs={{ span: 24, offset: 0 }}\r\n                        sm={{ span: 20, offset: 3 }}\r\n                        md={{ span: 10, offset: 1 }}\r\n                      >\r\n                        <CoinBottomInfo coinData={coinData} />\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n\r\n              <Col xs={{ span: 24, offset: 0 }} xl={{ span: 14, offset: 1 }}>\r\n                <div className=\"description\">\r\n                  <div className=\"title\">\r\n                    <Avatar size={50} src={coinData.image?.large} />\r\n                    {`About ${coinData.name}:`}\r\n                  </div>\r\n                  <div className=\"text\">\r\n                    <div className=\"textWrap\">\r\n                      {parse(`${coinData.description?.en}`)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart.jsx",["110"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { Line } from \"@ant-design/charts\";\r\nimport { getSelectedCoin } from \"../../utils/api\";\r\nimport { formatPrice } from \"../../utils/helpers\";\r\nimport { interval } from \"../../utils/const\";\r\nimport { Spinner } from \"../loadingSpinner/Spinner\";\r\n\r\nexport default function CoinChart(props) {\r\n  const { selectedCoinC } = useContext(stateCoinsContext);\r\n\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [coinChartData, setChartData] = useState([]);\r\n  const [lastInterval, setLastInterval] = useState();\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (selectedCoin) {\r\n      (async function () {\r\n        const coinChartInfo = await getSelectedCoin(\r\n          selectedCoin,\r\n          interval.day.value\r\n        );\r\n        setChartData(coinChartInfo);\r\n      })();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n  const config = {\r\n    renderer: \"canvas\",\r\n    autoFit: true,\r\n    xField: \"date\",\r\n    yField: \"price\",\r\n    label: false,\r\n    tooltip: { showMarkers: true },\r\n    lineStyle: {\r\n      stroke: \"orange\",\r\n      lineWidth: 2,\r\n      lineDash: [1, 2],\r\n      strokeOpacity: 1,\r\n      shadowColor: \"orange\",\r\n      shadowBlur: 10,\r\n      shadowOffsetX: 5,\r\n      shadowOffsetY: 5,\r\n    },\r\n    smooth: true,\r\n\r\n    meta: {\r\n      price: {\r\n        formatter: (price) => {\r\n          return formatPrice(price);\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const changeInterval = (e) => {\r\n    console.log(e.target.value);\r\n    if (lastInterval === e.target.value) {\r\n      console.log(\"returned\", lastInterval, \" e : \", e.target.value);\r\n      return;\r\n    }\r\n    const chartInterval = Number(e.target.value)\r\n      ? +e.target.value\r\n      : interval.max.value;\r\n\r\n    (async function () {\r\n      setLoading(true);\r\n\r\n      const coinChartInfo = await getSelectedCoin(selectedCoin, chartInterval);\r\n      setChartData(coinChartInfo);\r\n      setLastInterval(e.target.value);\r\n      setLoading(false);\r\n    })();\r\n  };\r\n\r\n  const renderButtons = () =>\r\n    Object.values(interval).map((obj) => (\r\n      <button\r\n        key={obj.label}\r\n        className=\"ant-btn\"\r\n        value={obj.value}\r\n        onClick={(e) => changeInterval(e)}\r\n      >\r\n        {obj.label}\r\n      </button>\r\n    ));\r\n\r\n  return (\r\n    <div style={{ marginTop: \"10px\" }}>\r\n      <div className=\"navigation\">{renderButtons()}</div>\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        {coinChartData && (\r\n          <div>\r\n            <Line\r\n              loading={isLoading}\r\n              loadingTemplate={<Spinner tip=\"Fetching Chart Data...\" />}\r\n              data={coinChartData}\r\n              {...config}\r\n              style={{ marginTop: \"15px\", position: \"relative\", zIndex: \"99\" }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo.jsx",["111"],"import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport {\r\n  formatPrice,\r\n  formatPercentage,\r\n  formatNumber,\r\n  renderInfo\r\n} from \"../../utils/helpers\";\r\n\r\nexport default function CoinDataTable(props) {\r\n  const { coinData } = props;\r\n  const typeMoney = formatPrice;\r\n  const typePercent = formatPercentage;\r\n  const typeNumber = formatNumber;\r\n  return (\r\n    <Row className=\"coinTableContainer\">\r\n      <Col\r\n        className=\"topRightInfo\"\r\n        sm={{ span: 22, offset: 2 }}\r\n        xs={{ span: 12 }}\r\n      >\r\n        {renderInfo(\r\n          coinData.market_data.market_cap.usd,\r\n          \"Market Cap\",\r\n          typeMoney\r\n        )}\r\n        {renderInfo(\r\n          [coinData.market_data.low_24h.usd, coinData.market_data.high_24h.usd],\r\n          \"24h Low / 24h High\",\r\n          typeMoney\r\n        )}\r\n        {renderInfo(\r\n          coinData.market_data.fully_diluted_valuation.usd,\r\n          \"Fully Diluted Valuation\",\r\n          typeMoney\r\n        )}\r\n      </Col>\r\n      <Col\r\n        className=\"topRightInfo\"\r\n        sm={{ span: 22, offset: 2 }}\r\n        xs={{ span: 12 }}\r\n      >\r\n        {renderInfo(coinData.total_volume, \"24 Hour Trading Vol\", typeMoney)}\r\n        {renderInfo(\r\n          [\r\n            coinData.market_data.circulating_supply,\r\n            coinData.market_data.max_supply,\r\n          ],\r\n          \"Circulating Supply\",\r\n          typeNumber\r\n        )}\r\n        {renderInfo(\r\n          coinData.market_data.total_volume.usd,\r\n          \"24 Hour Trading Vol\",\r\n          typeMoney\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinBottomInfo.jsx",["112","113","114","115","116"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport {\r\n  formatPrice,\r\n  formatPercentage,\r\n  formatNumber,\r\n  formatDate,\r\n  renderBottomInfo,\r\n} from \"../../utils/helpers\";\r\n\r\nexport default function CoinBottomInfo(props) {\r\n  const [coinDataTable, setCoinDataTable] = useState();\r\n\r\n  const typeMoney = formatPrice;\r\n  const typePercent = formatPercentage;\r\n  const typeNumber = formatNumber;\r\n  const typeDate = formatDate;\r\n\r\n  function DataObj(data, label, type, addClass) {\r\n    return data, label, type, addClass;\r\n  }\r\n  const dataArr = [];\r\n\r\n  const constructData = (data, label, type) => {\r\n    const coinInfo = new DataObj();\r\n    if (typeof data === \"object\") {\r\n      const dataObject = [];\r\n      data.map((dt) => {\r\n        const splitData = dt.split(\".\");\r\n        dataObject.push(splitData.reduce((a, b) => a[b], props.coinData));\r\n\r\n        coinInfo.addClass = splitData[Math.floor(splitData.length / 2)];\r\n      });\r\n      coinInfo.data = dataObject;\r\n    } else {\r\n      const splitData = data.split(\".\");\r\n      const dataString = splitData.reduce((a, b) => a[b], props.coinData);\r\n      coinInfo.data = dataString;\r\n\r\n      coinInfo.addClass = splitData[Math.floor(splitData.length / 2)];\r\n    }\r\n\r\n    coinInfo.label = label;\r\n    coinInfo.type = type;\r\n\r\n    dataArr.push(coinInfo);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      if (props.coinData) {\r\n        const { coinData } = props;\r\n        const { symbol } = coinData;\r\n        constructData(\r\n          \"market_data.current_price.usd\",\r\n          `${symbol.toUpperCase()} Price`,\r\n          typeMoney\r\n        );\r\n        constructData(\r\n          [\"market_data.high_24h.usd\", \"market_data.low_24h.usd\"],\r\n          \"24h Low / 24h High\",\r\n          [typeMoney, typeMoney]\r\n        );\r\n        constructData(\r\n          [\r\n            \"market_data.ath.usd\",\r\n            \"market_data.ath_change_percentage.usd\",\r\n            \"market_data.ath_date.usd\",\r\n          ],\r\n          \"All-Time High\",\r\n          [typeMoney, typePercent, typeDate]\r\n        );\r\n        constructData(\r\n          [\r\n            \"market_data.atl.usd\",\r\n            \"market_data.atl_change_percentage.usd\",\r\n            \"market_data.atl_date.usd\",\r\n          ],\r\n          \"All-Time Low\",\r\n          [typeMoney, typePercent, typeDate]\r\n        );\r\n        setCoinDataTable(dataArr);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  console.log(\"table\", coinDataTable);\r\n  return (\r\n    <div>\r\n      {coinDataTable && (\r\n        <div>\r\n          <div className=\"bottomInfo\">\r\n            <div className=\"container\">\r\n              <div className=\"title\">Bitcoin Price and Market Stats</div>\r\n              {coinDataTable.map((row) => renderBottomInfo(row))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"117","replacedBy":"121"},{"ruleId":"119","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":14,"column":10,"nodeType":"125","messageId":"126","endLine":14,"endColumn":22},{"ruleId":"123","severity":1,"message":"127","line":15,"column":10,"nodeType":"125","messageId":"126","endLine":15,"endColumn":19},{"ruleId":"123","severity":1,"message":"128","line":15,"column":21,"nodeType":"125","messageId":"126","endLine":15,"endColumn":31},{"ruleId":"123","severity":1,"message":"129","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":15},{"ruleId":"123","severity":1,"message":"130","line":7,"column":17,"nodeType":"125","messageId":"126","endLine":7,"endColumn":24},{"ruleId":"123","severity":1,"message":"131","line":7,"column":33,"nodeType":"125","messageId":"126","endLine":7,"endColumn":40},{"ruleId":"123","severity":1,"message":"127","line":15,"column":10,"nodeType":"125","messageId":"126","endLine":15,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":22,"column":6,"nodeType":"134","endLine":22,"endColumn":8,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":98,"column":27,"nodeType":"138","messageId":"139","endLine":98,"endColumn":29},{"ruleId":"132","severity":1,"message":"140","line":38,"column":6,"nodeType":"134","endLine":38,"endColumn":8,"suggestions":"141"},{"ruleId":"123","severity":1,"message":"142","line":7,"column":10,"nodeType":"125","messageId":"126","endLine":7,"endColumn":22},{"ruleId":"123","severity":1,"message":"143","line":27,"column":26,"nodeType":"125","messageId":"126","endLine":27,"endColumn":43},{"ruleId":"123","severity":1,"message":"144","line":29,"column":9,"nodeType":"125","messageId":"126","endLine":29,"endColumn":12},{"ruleId":"132","severity":1,"message":"145","line":38,"column":6,"nodeType":"134","endLine":38,"endColumn":8,"suggestions":"146"},{"ruleId":"132","severity":1,"message":"147","line":45,"column":6,"nodeType":"134","endLine":45,"endColumn":20,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":50,"column":9,"nodeType":"151","messageId":"152","endLine":50,"endColumn":15},{"ruleId":"136","severity":1,"message":"137","line":135,"column":33,"nodeType":"153","messageId":"154","endLine":135,"endColumn":40},{"ruleId":"136","severity":1,"message":"137","line":148,"column":33,"nodeType":"153","messageId":"154","endLine":148,"endColumn":40},{"ruleId":"123","severity":1,"message":"155","line":26,"column":10,"nodeType":"125","messageId":"126","endLine":26,"endColumn":20},{"ruleId":"123","severity":1,"message":"156","line":27,"column":10,"nodeType":"125","messageId":"126","endLine":27,"endColumn":24},{"ruleId":"132","severity":1,"message":"157","line":45,"column":16,"nodeType":"158","endLine":45,"endColumn":56},{"ruleId":"132","severity":1,"message":"133","line":68,"column":6,"nodeType":"134","endLine":68,"endColumn":20,"suggestions":"159"},{"ruleId":"123","severity":1,"message":"160","line":14,"column":24,"nodeType":"125","messageId":"126","endLine":14,"endColumn":39},{"ruleId":"123","severity":1,"message":"161","line":13,"column":9,"nodeType":"125","messageId":"126","endLine":13,"endColumn":20},{"ruleId":"123","severity":1,"message":"162","line":3,"column":27,"nodeType":"125","messageId":"126","endLine":3,"endColumn":37},{"ruleId":"123","severity":1,"message":"163","line":17,"column":9,"nodeType":"125","messageId":"126","endLine":17,"endColumn":19},{"ruleId":"164","severity":1,"message":"165","line":21,"column":16,"nodeType":"166","messageId":"167","endLine":21,"endColumn":17},{"ruleId":"136","severity":1,"message":"137","line":29,"column":21,"nodeType":"138","messageId":"139","endLine":29,"endColumn":23},{"ruleId":"132","severity":1,"message":"168","line":86,"column":6,"nodeType":"134","endLine":86,"endColumn":8,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],["170"],["171"],"no-unused-vars","'selectedCoin' is assigned a value but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'Table' is defined but never used.","'AntdRow' is defined but never used.","'AntdCol' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array.","ArrayExpression",["172"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'numOfPages', 'selectedCoin', 'setLoading', and 'setnumOfPages'. Either include them or remove the dependency array.",["173"],"'CurrencyCard' is defined but never used.","'setScrollPosition' is assigned a value but never used.","'tip' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'numOfPages' and 'setnumOfPages'. Either include them or remove the dependency array.",["174"],"React Hook useEffect has a missing dependency: 'scrollPosition'. Either include it or remove the dependency array.",["175"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","ReturnStatement","expectedReturnValue","'searchText' is assigned a value but never used.","'scrollPosition' is assigned a value but never used.","Assignments to the 'urlSlice' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["176"],"'setSelectedCoin' is assigned a value but never used.","'typePercent' is assigned a value but never used.","'useContext' is defined but never used.","'typeNumber' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has missing dependencies: 'constructData', 'dataArr', 'props', 'typeDate', 'typeMoney', and 'typePercent'. Either include them or remove the dependency array.",["177"],"no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [setLoading]",{"range":"190","text":"191"},"Update the dependencies array to be: [numOfPages, selectedCoin, setLoading, setnumOfPages]",{"range":"192","text":"193"},"Update the dependencies array to be: [numOfPages, setnumOfPages]",{"range":"194","text":"195"},"Update the dependencies array to be: [scrollPosition, selectedCoin]",{"range":"196","text":"197"},"Update the dependencies array to be: [selectedCoin, setLoading]",{"range":"198","text":"199"},"Update the dependencies array to be: [constructData, dataArr, props, typeDate, typeMoney, typePercent]",{"range":"200","text":"201"},[765,767],"[setLoading]",[1168,1170],"[numOfPages, selectedCoin, setLoading, setnumOfPages]",[1243,1245],"[numOfPages, setnumOfPages]",[1405,1419],"[scrollPosition, selectedCoin]",[1951,1965],"[selectedCoin, setLoading]",[2448,2450],"[constructData, dataArr, props, typeDate, typeMoney, typePercent]"]