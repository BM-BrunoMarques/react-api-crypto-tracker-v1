[{"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js":"1","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js":"2","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx":"3","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx":"4","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js":"5","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx":"6","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js":"7","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\renderCoinInfo.jsx":"8","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinBottomInfo.jsx":"9","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinTopInfo.jsx":"10","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart\\CoinChart.jsx":"11","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks\\TagLinks.jsx":"12","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\CoinsHomeListing.jsx":"13","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.jsx":"14","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\TableScroll\\TableScroll.jsx":"15","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.jsx":"16"},{"size":1862,"mtime":1614545770306,"results":"17","hashOfConfig":"18"},{"size":218,"mtime":1612069310889,"results":"19","hashOfConfig":"18"},{"size":275,"mtime":1614016379932,"results":"20","hashOfConfig":"18"},{"size":781,"mtime":1613277189129,"results":"21","hashOfConfig":"18"},{"size":1431,"mtime":1614544543285,"results":"22","hashOfConfig":"18"},{"size":6119,"mtime":1614545808945,"results":"23","hashOfConfig":"18"},{"size":821,"mtime":1614543509228,"results":"24","hashOfConfig":"18"},{"size":1699,"mtime":1614541618788,"results":"25","hashOfConfig":"18"},{"size":2842,"mtime":1614544304157,"results":"26","hashOfConfig":"18"},{"size":1966,"mtime":1614541657221,"results":"27","hashOfConfig":"18"},{"size":2857,"mtime":1614547648693,"results":"28","hashOfConfig":"18"},{"size":5024,"mtime":1614544432618,"results":"29","hashOfConfig":"18"},{"size":2252,"mtime":1614544489183,"results":"30","hashOfConfig":"18"},{"size":2285,"mtime":1614544568297,"results":"31","hashOfConfig":"18"},{"size":6164,"mtime":1614544519002,"results":"32","hashOfConfig":"18"},{"size":2687,"mtime":1614545832558,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"phcpdk",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js",[],["73","74"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx",["75","76"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport { formatPrice, formatPercentage } from \"../../utils/helpers\";\r\nimport React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { Spinner } from \"../loadingSpinner/Spinner\";\r\nimport { Avatar, Row, Col } from \"antd\";\r\nimport { getSelectedCoinData } from \"../../utils/api\";\r\nimport parse from \"html-react-parser\";\r\nimport TagLinks from \"./TagLinks/TagLinks\";\r\nimport CoinChart from \"./CoinChart/CoinChart\";\r\nimport CoinTopInfo from \"./CoinInfo/CoinTopInfo\";\r\nimport CoinBottomInfo from \"./CoinInfo/CoinBottomInfo\";\r\n\r\nexport default function Coin(props) {\r\n  const { selectedCoinC, isLoadingC, scrollPositionC } = useContext(\r\n    stateCoinsContext\r\n  );\r\n\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [, setScrollPosition] = scrollPositionC;\r\n\r\n  const [coinData, setcoinData] = useState();\r\n  const history = useHistory();\r\n\r\n  const { coinId } = props.history.location;\r\n\r\n  const avatarSize = {\r\n    xs: 40,\r\n    sm: 40,\r\n    md: 40,\r\n    lg: 64,\r\n    xl: 80,\r\n    xxl: 80,\r\n  };\r\n\r\n  let urlSlice = \"\";\r\n  useEffect(() => {\r\n    urlSlice = props.location.pathname.split(\"/\").pop();\r\n    if (!selectedCoin || selectedCoin !== urlSlice) {\r\n      if (urlSlice !== \"/coin\") {\r\n        setSelectedCoin(urlSlice);\r\n        setScrollPosition(urlSlice);\r\n      } else if (!coinId) {\r\n        setSelectedCoin(coinId);\r\n        setScrollPosition(coinId);\r\n      } else {\r\n        history.push(\"/\");\r\n        setSelectedCoin(\"\");\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedCoin) {\r\n      (async function () {\r\n        const coinData = await getSelectedCoinData(selectedCoin);\r\n        setcoinData(coinData);\r\n        setLoading(false);\r\n      })();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n  return (\r\n    <Col className=\"coinStage\" span={24}>\r\n      <div className=\"coinWrap\">\r\n        {coinData && (\r\n          <Row>\r\n            {isLoading.load && <Spinner tip={isLoading.tip} />}\r\n            <Col\r\n              xs={{ span: 24 }}\r\n              sm={{ span: 22, offset: 1 }}\r\n              md={{ span: 23, offset: 1 }}\r\n            >\r\n              <Row className=\"header\" justify=\"start\">\r\n                <Col span={14}>\r\n                  <div className=\"headerLeft\">\r\n                    <Avatar size={avatarSize} src={coinData.image?.large} />\r\n\r\n                    <h2 className=\"titleCoin\">\r\n                      {coinData.name} <i>({coinData.symbol?.toUpperCase()})</i>\r\n                    </h2>\r\n                  </div>\r\n                </Col>\r\n                <Col span={9} offset={1}>\r\n                  <div className=\"headerRight\">\r\n                    <span className=\"currentPrice\">\r\n                      {formatPrice(coinData.market_data.current_price.usd)}\r\n                    </span>\r\n                    <span\r\n                      className={`percent ${\r\n                        coinData.market_data.price_change_percentage_24h >= 0\r\n                          ? \"positive\"\r\n                          : \"negative\"\r\n                      }`}\r\n                    >\r\n                      {formatPercentage(\r\n                        coinData.market_data.price_change_percentage_24h\r\n                      )}\r\n                    </span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Col md={{ span: 22, offset: 1 }}>\r\n                <Row style={{ alignItems: \"center\", justifyContent: \"center\" }}>\r\n                  <Col className=\"leftSide\" xs={{ span: 24 }} sm={{ span: 13 }}>\r\n                    <TagLinks coinData={coinData} />\r\n                  </Col>\r\n\r\n                  <Col\r\n                    className=\"rightSide\"\r\n                    xs={{ span: 24 }}\r\n                    sm={{ span: 8, offset: 2 }}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <CoinTopInfo coinData={coinData} />\r\n                  </Col>\r\n                </Row>\r\n                <Row style={{ marginTop: \"40px\" }} justify=\"start\">\r\n                  <Col span={24}>\r\n                    <Row>\r\n                      <Col\r\n                        xs={{ span: 22, offset: 1 }}\r\n                        sm={{ span: 23, offset: 1 }}\r\n                        md={{ span: 13, offset: 0 }}\r\n                      >\r\n                        <CoinChart />\r\n                      </Col>\r\n                      <Col\r\n                        xs={{ span: 24, offset: 0 }}\r\n                        sm={{ span: 20, offset: 3 }}\r\n                        md={{ span: 10, offset: 1 }}\r\n                        lg={{ span: 8, offset: 3 }}\r\n                      >\r\n                        <CoinBottomInfo\r\n                          coinData={coinData}\r\n                          selectedCoin={selectedCoin}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              {coinData.description.en && (\r\n                <Row justify=\"center\">\r\n                  <Col\r\n                    xs={{ span: 24, offset: 0 }}\r\n                    md={{ span: 22, offset: 1 }}\r\n                    xl={{ span: 17, offset: 0 }}\r\n                  >\r\n                    <div className=\"description\">\r\n                      <div className=\"title\">\r\n                        <Avatar size={50} src={coinData.image?.large} />\r\n                        {`About ${coinData.name}:`}\r\n                      </div>\r\n                      <div className=\"text\">\r\n                        <div className=\"textWrap\">\r\n                          {parse(`${coinData.description?.en}`)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\renderCoinInfo.jsx",["77"],"import { months } from \"../../../utils/const\";\r\nimport {formatDate} from \"../../../utils/helpers\"\r\n\r\nexport const renderCoinInfo = ({ data, label, type, addClass, separator }) => {\r\n  const addClassCategory = (data) => {\r\n    const classes = [];\r\n    classes.push(data.includes(\"-\") ? \"negative \" : \"\");\r\n    classes.push(data.includes(\"%\") ? \"percent \" : \"\");\r\n    classes.push(data.includes(\"$\") ? \"currency \" : \"\");\r\n    const classDate = () => {\r\n      for (let month of months) {\r\n        if (data.includes(month)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    classes.push(classDate() ? \"date\" : \"\");\r\n    classes.push();\r\n    return classes.join(\"\").toString();\r\n  };\r\n\r\n  const convertedData = [];\r\n  const multiple = typeof data === \"object\" ? true : false;\r\n\r\n  if (multiple) {\r\n    data.map((data, indx) => {\r\n      let converted;\r\n      if (type[indx] === formatDate) {\r\n        const { month, day, year } = type[indx](data);\r\n        converted = `${day} ${months[month - 1]} ${year}`;\r\n      } else {\r\n        converted = type[indx](data);\r\n      }\r\n      convertedData.push(converted);\r\n    });\r\n  } else {\r\n    convertedData.push(type(data));\r\n  }\r\n\r\n  return (\r\n    <div key={label} className=\"tagRow\">\r\n      <div className=\"tagLegend\">{label}</div>\r\n      <div className={`info ${addClass}`}>\r\n        {convertedData.map((data, indx) => (\r\n          <span\r\n            key={`${addClass}${label}${indx ** 2}`}\r\n            className={`${addClassCategory(data)}`}\r\n          >\r\n            {data}\r\n            {separator && <span className=\"separator\">{separator[indx]}</span>}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",["78","79"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinBottomInfo.jsx",["80","81"],"import \"../../../App.css\";\r\nimport \"./CoinInfo.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  formatPrice,\r\n  formatPercentage,\r\n  formatDate,\r\n} from \"../../../utils/helpers\";\r\nimport { renderCoinInfo } from \"./renderCoinInfo\";\r\n\r\nexport default function CoinBottomInfo(props) {\r\n  const [coinDataTable, setCoinDataTable] = useState();\r\n\r\n  const typeMoney = formatPrice;\r\n  const typePercent = formatPercentage;\r\n  const typeDate = formatDate;\r\n\r\n  function DataObj(data, label, type, addClass, separator) {\r\n    return data, label, type, addClass, separator;\r\n  }\r\n  const dataArr = [];\r\n\r\n  const constructData = ({ data, label, type, separator }) => {\r\n    const coinInfo = new DataObj();\r\n    if (typeof data === \"object\") {\r\n      const dataObject = [];\r\n      for (let dt of data) {\r\n        const splitData = dt.split(\".\");\r\n        dataObject.push(splitData.reduce((a, b) => a[b], props.coinData));\r\n\r\n        coinInfo.addClass = splitData[Math.floor(splitData.length / 2)];\r\n      }\r\n      coinInfo.data = dataObject;\r\n    } else {\r\n      const splitData = data.split(\".\");\r\n      const dataString = splitData.reduce((a, b) => a[b], props.coinData);\r\n      coinInfo.data = dataString;\r\n\r\n      coinInfo.addClass = splitData[Math.floor(splitData.length / 2)];\r\n    }\r\n\r\n    coinInfo.label = label;\r\n    coinInfo.type = type;\r\n    coinInfo.separator = separator;\r\n\r\n    dataArr.push(coinInfo);\r\n  };\r\n\r\n  const { coinData } = props;\r\n  const { symbol } = coinData;\r\n\r\n  const bottomInfoData = [\r\n    {\r\n      data: [\"market_data.current_price.usd\"],\r\n      label: `${symbol.toUpperCase()} Price`,\r\n      type: [typeMoney],\r\n    },\r\n    {\r\n      data: [\"market_data.high_24h.usd\", \"market_data.low_24h.usd\"],\r\n      label: \"24h High / 24h Low\",\r\n      type: [typeMoney, typeMoney],\r\n      separator: [\"/\"],\r\n    },\r\n    {\r\n      data: [\r\n        \"market_data.ath.usd\",\r\n        \"market_data.ath_change_percentage.usd\",\r\n        \"market_data.ath_date.usd\",\r\n      ],\r\n      label: \"All-Time High\",\r\n      type: [typeMoney, typePercent, typeDate],\r\n    },\r\n    {\r\n      data: [\r\n        \"market_data.atl.usd\",\r\n        \"market_data.atl_change_percentage.usd\",\r\n        \"market_data.atl_date.usd\",\r\n      ],\r\n      label: \"All-Time Low\",\r\n      type: [typeMoney, typePercent, typeDate],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      if (props.coinData) {\r\n        bottomInfoData.map((data) => constructData(data));\r\n        setCoinDataTable(dataArr);\r\n      }\r\n    })();\r\n  }, [props.coinData]);\r\n\r\n  return (\r\n    <div className=\"bottomInfo\">\r\n      {coinDataTable && (\r\n        <div className=\"container\">\r\n          <div className=\"title\">Bitcoin Price and Market Stats</div>\r\n          {coinDataTable.map((row) => renderCoinInfo(row))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo\\CoinTopInfo.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart\\CoinChart.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks\\TagLinks.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\CoinsHomeListing.jsx",["82","83"],"import \"../../App.css\";\r\nimport React, { useEffect, useContext } from \"react\";\r\nimport { getCoins, getAllCoinsList } from \"../../utils/api.js\";\r\nimport { Spinner } from \"../loadingSpinner/Spinner\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { endOfContentLabel } from \"../../utils/const\";\r\nimport TableScroll from \"./TableScroll/TableScroll\";\r\n\r\nexport default function CoinsHomeListing(props) {\r\n  const {\r\n    moreItemsC,\r\n    numOfPagesC,\r\n    stateCoinsC,\r\n    isLoadingC,\r\n    selectedCoinC,\r\n    scrollPositionC,\r\n    fetchDataFunctionC,\r\n  } = useContext(stateCoinsContext);\r\n\r\n  const [selectedCoin] = selectedCoinC;\r\n  const [moreItems, setMoreItems] = moreItemsC;\r\n  const [numOfPages, setnumOfPages] = numOfPagesC;\r\n  const [stateValues, setStateValues] = stateCoinsC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [scrollPosition, ] = scrollPositionC;\r\n  const [fetchDataFunction, ] = fetchDataFunctionC;\r\n  //\r\n\r\n  useEffect(() => {\r\n    if (!numOfPages) {\r\n      getAllCoinsList().then((responseAllCoins) => {\r\n        setnumOfPages(Math.ceil(responseAllCoins.length / 250));\r\n      });\r\n    }\r\n    if (!fetchDataFunction) {\r\n      fetchData();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (scrollPosition) {\r\n      document?.getElementById(scrollPosition)?.scrollIntoView();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n\r\n  const fetchData = () => {\r\n    if (!moreItems || selectedCoin) return;\r\n\r\n    setLoading({\r\n      load: true,\r\n      tip: \"Fetching Coins...\",\r\n    });\r\n    if (stateValues.page > numOfPages) {\r\n      setMoreItems(false);\r\n    }\r\n    getCoins(stateValues.page).then((responseCoins) => {\r\n      setStateValues((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          coins: [...prevState.coins, ...responseCoins],\r\n          page: prevState.page + 1,\r\n        };\r\n      });\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoading.load && <Spinner tip={isLoading.tip} />}\r\n\r\n      {numOfPages && (\r\n        <div>\r\n          <TableScroll fetchData={fetchData} />\r\n          {!moreItems && (\r\n            <p style={{ textAlign: \"center\" }}>\r\n              <b>{endOfContentLabel}</b>\r\n            </p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing\\TableScroll\\TableScroll.jsx",["84"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Avatar } from \"antd\";\r\nimport { TinyLine } from \"@ant-design/charts\";\r\nimport { stateCoinsContext } from \"../../App\";\r\nimport { formatPrice, formatPercentage } from \"../../../utils/helpers\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { StickyTable, Row, Cell } from \"react-sticky-table\";\r\nimport LazyLoad from \"react-lazyload\";\r\n\r\nimport \"./TableScroll.css\";\r\n\r\nexport default function TableScroll(props) {\r\n  const { stateCoinsC, isLoadingC } = useContext(stateCoinsContext);\r\n\r\n  const [stateValues] = stateCoinsC;\r\n  const [, setLoading] = isLoadingC;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setLoading({\r\n      load: false,\r\n    });\r\n  }, []);\r\n\r\n  const config = {\r\n    height: 60,\r\n    width: 80,\r\n    autoFit: false,\r\n    smooth: false,\r\n    passive: false,\r\n\r\n    lineStyle: {\r\n      stroke: \"blue\",\r\n      lineWidth: 1,\r\n      lineDash: [1, 1],\r\n      strokeOpacity: 0.7,\r\n      shadowColor: \"black\",\r\n      shadowBlur: 10,\r\n      shadowOffsetX: 5,\r\n      shadowOffsetY: 5,\r\n    },\r\n    tooltip: {\r\n      formatter: (data) => {\r\n        return data.y;\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = {\r\n    coin: {\r\n      title: \"Coin\",\r\n      key: [\"image\", \"name\"],\r\n      render: (record) => {\r\n        const id = \"coin\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <div style={{ display: \"flex\", maxWidth: \"130px\" }}>\r\n            <Avatar size=\"normal\" src={record[key[0]]} />\r\n            <span className=\"title\">{record[key[1]]}</span>\r\n            <div\r\n              style={{ position: \" absolute\", top: \"-35px\" }}\r\n              id={record.id}\r\n            ></div>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    symbol: {\r\n      title: \"\",\r\n      key: \"symbol\",\r\n      render: (record) => {\r\n        const id = \"symbol\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span style={{ maxWidth: \"80px\", display: \"inline-block\" }}>\r\n            {record[key].toUpperCase()}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    current_price: {\r\n      title: \"Price\",\r\n      key: \"current_price\",\r\n      render: (record) => {\r\n        const id = \"current_price\";\r\n        const key = columns[id].key;\r\n        return <span>{formatPrice(record[key])}</span>;\r\n      },\r\n    },\r\n    price_change_percentage_1h_in_currency: {\r\n      title: \"1h\",\r\n      key: \"price_change_percentage_1h_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_1h_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    price_change_percentage_24h_in_currency: {\r\n      title: \"24h\",\r\n      key: \"price_change_percentage_24h_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_24h_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    price_change_percentage_7d_in_currency: {\r\n      title: \"7d\",\r\n      key: \"price_change_percentage_7d_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_7d_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    sparkline_in_7d: {\r\n      title: \"Last 7 Days\",\r\n      key: \"sparkline_in_7d\",\r\n      render: (record) => {\r\n        const id = \"sparkline_in_7d\";\r\n        const key = columns[id].key;\r\n        return <TinyLine data={record[key].price} {...config} />;\r\n      },\r\n    },\r\n  };\r\n\r\n  const renderHeader = (data, ind) => (\r\n    <Row className=\"sticky-table-row\">\r\n      {Object.values(columns).map((column, ind) => (\r\n        <Cell\r\n          key={`${column.title}${ind}`}\r\n          className=\"stickyBG\"\r\n          id={`${column.title}${ind}`}\r\n        >\r\n          {column.title}\r\n        </Cell>\r\n      ))}\r\n    </Row>\r\n  );\r\n\r\n  const renderRows = (data, ind) => (\r\n    <Row\r\n      className=\"coinRow\"\r\n      style={{ zIndex: \"3\", display: \"contents\" }}\r\n      key={`${data.id}${ind}`}\r\n      onClick={() => {\r\n        setLoading({\r\n          load: true,\r\n          tip: `Loading Coin!`,\r\n        });\r\n        //timeout\r\n        history.push(`/coin/${data.id}`);\r\n      }}\r\n    >\r\n      <LazyLoad\r\n        overflow\r\n        resize={true}\r\n        offset={500}\r\n        key={`${data.id}${ind}`}\r\n        height={50}\r\n        className=\"coinRow\"\r\n        style={{ display: \"table-row\" }}\r\n      >\r\n        <Cell className=\"stickyBG\" style={{ zIndex: \"2\" }}>\r\n          {columns.coin.render(data)}\r\n        </Cell>\r\n\r\n        <Cell>{columns.symbol.render(data)}</Cell>\r\n        <Cell>{columns.current_price.render(data)}</Cell>\r\n        <Cell>\r\n          {columns.price_change_percentage_1h_in_currency.render(data)}\r\n        </Cell>\r\n        <Cell>\r\n          {columns.price_change_percentage_24h_in_currency.render(data)}\r\n        </Cell>\r\n        <Cell>\r\n          {columns.price_change_percentage_7d_in_currency.render(data)}\r\n        </Cell>\r\n        <Cell>{columns.sparkline_in_7d.render(data)}</Cell>\r\n      </LazyLoad>\r\n    </Row>\r\n  );\r\n\r\n  const onScroll = (e) => {\r\n    if (e.target.scrollTop >= e.target.scrollHeight - e.target.offsetHeight) {\r\n      props.fetchData();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {stateValues.coins && (\r\n        <div className=\"wrapper overflow-wrapper\">\r\n          <StickyTable\r\n            className=\"overflow CoinsListingContainer\"\r\n            onScroll={onScroll}\r\n          >\r\n            {renderHeader()}\r\n            {stateValues.coins.map((data, ind) => renderRows(data, ind))}\r\n          </StickyTable>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.jsx",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":41,"column":16,"nodeType":"91","endLine":41,"endColumn":56},{"ruleId":"89","severity":1,"message":"92","line":64,"column":6,"nodeType":"93","endLine":64,"endColumn":20,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":28,"column":27,"nodeType":"97","messageId":"98","endLine":28,"endColumn":29},{"ruleId":"85","replacedBy":"99"},{"ruleId":"87","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":19,"column":16,"nodeType":"103","messageId":"104","endLine":19,"endColumn":17},{"ruleId":"89","severity":1,"message":"105","line":91,"column":6,"nodeType":"93","endLine":91,"endColumn":22,"suggestions":"106"},{"ruleId":"89","severity":1,"message":"107","line":38,"column":6,"nodeType":"93","endLine":38,"endColumn":8,"suggestions":"108"},{"ruleId":"89","severity":1,"message":"109","line":44,"column":6,"nodeType":"93","endLine":44,"endColumn":20,"suggestions":"110"},{"ruleId":"89","severity":1,"message":"92","line":23,"column":6,"nodeType":"93","endLine":23,"endColumn":8,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","Assignments to the 'urlSlice' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array.","ArrayExpression",["114"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["112"],["113"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has missing dependencies: 'bottomInfoData', 'constructData', and 'dataArr'. Either include them or remove the dependency array.",["115"],"React Hook useEffect has missing dependencies: 'fetchData', 'fetchDataFunction', 'numOfPages', and 'setnumOfPages'. Either include them or remove the dependency array.",["116"],"React Hook useEffect has a missing dependency: 'scrollPosition'. Either include it or remove the dependency array.",["117"],["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [selectedCoin, setLoading]",{"range":"129","text":"130"},"Update the dependencies array to be: [bottomInfoData, constructData, dataArr, props.coinData]",{"range":"131","text":"132"},"Update the dependencies array to be: [fetchData, fetchDataFunction, numOfPages, setnumOfPages]",{"range":"133","text":"134"},"Update the dependencies array to be: [scrollPosition, selectedCoin]",{"range":"135","text":"136"},"Update the dependencies array to be: [setLoading]",{"range":"137","text":"138"},[1901,1915],"[selectedCoin, setLoading]",[2531,2547],"[bottomInfoData, constructData, dataArr, props.coinData]",[1192,1194],"[fetchData, fetchDataFunction, numOfPages, setnumOfPages]",[1327,1341],"[scrollPosition, selectedCoin]",[741,743],"[setLoading]"]