[{"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js":"1","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js":"2","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\params.js":"3","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js":"4","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.js":"5","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\ItemList.js":"6","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx":"7","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CurrencyCard\\CurrencyCard.jsx":"8","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx":"9","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\TableScroll\\TableScroll.jsx":"10","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js":"11","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\coinsHomeListing.js":"12","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing.js":"13","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks.jsx":"14","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx":"15","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart.jsx":"16","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js":"17","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo.jsx":"18","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinBottomInfo.jsx":"19"},{"size":2632,"mtime":1614048014353,"results":"20","hashOfConfig":"21"},{"size":2976,"mtime":1614123906936,"results":"22","hashOfConfig":"21"},{"size":53,"mtime":1612069310891,"results":"23","hashOfConfig":"21"},{"size":218,"mtime":1612069310889,"results":"24","hashOfConfig":"21"},{"size":1643,"mtime":1614048492949,"results":"25","hashOfConfig":"21"},{"size":776,"mtime":1612760567320,"results":"26","hashOfConfig":"21"},{"size":275,"mtime":1614016379932,"results":"27","hashOfConfig":"21"},{"size":559,"mtime":1612987998476,"results":"28","hashOfConfig":"21"},{"size":781,"mtime":1613277189129,"results":"29","hashOfConfig":"21"},{"size":6473,"mtime":1614048348963,"results":"30","hashOfConfig":"21"},{"size":3186,"mtime":1614136137053,"results":"31","hashOfConfig":"21"},{"size":2501,"mtime":1613280329088,"results":"32","hashOfConfig":"21"},{"size":2653,"mtime":1614040757629,"results":"33","hashOfConfig":"21"},{"size":5116,"mtime":1614054127092,"results":"34","hashOfConfig":"21"},{"size":6107,"mtime":1614136055600,"results":"35","hashOfConfig":"21"},{"size":2956,"mtime":1614129459506,"results":"36","hashOfConfig":"21"},{"size":759,"mtime":1614123852321,"results":"37","hashOfConfig":"21"},{"size":1592,"mtime":1614056518928,"results":"38","hashOfConfig":"21"},{"size":2869,"mtime":1614131069072,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"phcpdk",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\App.js",[],["86","87"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\api.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\params.js",[],["88","89"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\index.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\SearchBar.js",["90","91","92"],"import \"../App.css\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { getAllCoinsList } from \"../utils/api\";\r\nimport { AutoComplete } from \"antd\";\r\nimport { Sorter } from \"./AutoComplete/Sorter\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { stateCoinsContext } from \"./App\";\r\n\r\nexport default function SearchBar(props) {\r\n  //useContext\r\n  const { selectedCoinC, isLoadingC, searchTextC } = useContext(\r\n    stateCoinsContext\r\n  );\r\n  const [selectedCoin, setSelectedCoin] = selectedCoinC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [searchText, setSearchText] = searchTextC;\r\n  //useState\r\n  const [searchCoins, setCoins] = useState([]);\r\n  const [searchOptions, setOptions] = useState([]);\r\n  const history = useHistory();\r\n\r\n  //Hooks\r\n  useEffect(() => {\r\n    getAllCoinsList().then((coins) => {\r\n      setCoins(coins);\r\n    });\r\n  }, []);\r\n\r\n  const onSelect = (data) => {\r\n    setSelectedCoin(data);\r\n    history.push({\r\n      pathname: \"/coin/\" + data,\r\n    });\r\n    setSearchText('');\r\n  };\r\n\r\n  const onSearch = (searchText) => {\r\n    setSearchText(searchText);\r\n    const filteredOptions = Sorter(searchCoins, searchText);\r\n    setOptions(filteredOptions);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {searchCoins && (\r\n        <div>\r\n          <AutoComplete\r\n            placeholder='Looking for a specific coin?'\r\n            value={searchText}\r\n            options={searchOptions || []}\r\n            onSelect={onSelect}\r\n            onSearch={onSearch}\r\n            backfill={true}\r\n            style={{ width: \"200px\" }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\ItemList.js",[],["93","94"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\loadingSpinner\\Spinner.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CurrencyCard\\CurrencyCard.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\AutoComplete\\Sorter.jsx",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\TableScroll\\TableScroll.jsx",["95","96","97","98","99"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Table, Avatar } from \"antd\";\r\nimport { TinyLine } from \"@ant-design/charts\";\r\nimport { stateCoinsContext } from \"../App\";\r\nimport { formatPrice, formatPercentage } from \"../../utils/helpers\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Row as AntdRow, Col as AntdCol } from \"antd\";\r\nimport { StickyTable, Row, Cell } from \"react-sticky-table\";\r\n\r\nimport \"./TableScroll.css\";\r\n\r\nexport default function TableScroll(props) {\r\n  const { stateCoinsC, isLoadingC } = useContext(stateCoinsContext);\r\n  const [stateValues] = stateCoinsC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setLoading({\r\n      load: false,\r\n    });\r\n  }, []);\r\n\r\n  const config = {\r\n    height: 60,\r\n    width: 80,\r\n    autoFit: false,\r\n    smooth: false,\r\n    passive: false,\r\n\r\n    lineStyle: {\r\n      stroke: \"blue\",\r\n      lineWidth: 1,\r\n      lineDash: [1, 1],\r\n      strokeOpacity: 0.7,\r\n      shadowColor: \"black\",\r\n      shadowBlur: 10,\r\n      shadowOffsetX: 5,\r\n      shadowOffsetY: 5,\r\n    },\r\n    tooltip: {\r\n      formatter: (data) => {\r\n        return data.y;\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = {\r\n    coin: {\r\n      title: \"Coin\",\r\n      key: [\"image\", \"name\"],\r\n      render: (record) => {\r\n        const id = \"coin\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <div style={{ display: \"flex\", maxWidth: \"130px\" }}>\r\n            <Avatar size=\"normal\" src={record[key[0]]} />\r\n            <span className=\"title\">{record[key[1]]}</span>\r\n            <div\r\n              style={{ position: \" absolute\", top: \"-35px\" }}\r\n              id={record.id}\r\n            ></div>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    symbol: {\r\n      title: \"\",\r\n      key: \"symbol\",\r\n      render: (record) => {\r\n        const id = \"symbol\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span style={{ maxWidth: \"80px\", display: \"inline-block\" }}>\r\n            {record[key].toUpperCase()}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    current_price: {\r\n      title: \"Price\",\r\n      key: \"current_price\",\r\n      render: (record) => {\r\n        const id = \"current_price\";\r\n        const key = columns[id].key;\r\n        return <span>{formatPrice(record[key])}</span>;\r\n      },\r\n    },\r\n    price_change_percentage_1h_in_currency: {\r\n      title: \"1h\",\r\n      key: \"price_change_percentage_1h_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_1h_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    price_change_percentage_24h_in_currency: {\r\n      title: \"24h\",\r\n      key: \"price_change_percentage_24h_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_24h_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    price_change_percentage_7d_in_currency: {\r\n      title: \"7d\",\r\n      key: \"price_change_percentage_7d_in_currency\",\r\n      render: (record) => {\r\n        const id = \"price_change_percentage_7d_in_currency\";\r\n        const key = columns[id].key;\r\n        return (\r\n          <span\r\n            className={`percent ${record[key] > 0 ? \"positive\" : \"negative\"}`}\r\n          >\r\n            {formatPercentage(record[key])}\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    sparkline_in_7d: {\r\n      title: \"Last 7 Days\",\r\n      key: \"sparkline_in_7d\",\r\n      render: (record) => {\r\n        const id = \"sparkline_in_7d\";\r\n        const key = columns[id].key;\r\n        return <TinyLine data={record[key].price} {...config} />;\r\n      },\r\n    },\r\n\r\n    // {\r\n    //   title: \"Last 7 Days\",\r\n    //   dataIndex: \"sparkline_in_7d\",\r\n    //   key: \"sparkline_in_7d\",\r\n    //   align: \"center\",\r\n    //   width: 100,\r\n    //   height: 60,\r\n    //   render: ({ price }) => {\r\n    //     // const dataMod = price.map((price) => price.toFixed(4));\r\n    //     // <MiniChart dataSet={price}/>\r\n    //\r\n    //     // const sparklinePrices = sparkline.price.map((price, indx) => ({\r\n    //     //   day: Math.round(indx * 100 / sparkline.price.length),\r\n    //     //   value: Math.ceil(price),\r\n    //     // }));\r\n    //     // return <Line data={sparklinePrices} {...config} />;\r\n    //   },\r\n    // },\r\n  };\r\n\r\n  const renderHeader = () => (\r\n    <Row>\r\n      {Object.values(columns).map((column, ind) => (\r\n        <Cell className=\"stickyBG\" id={`${column.title}${ind}`}>\r\n          {column.title}\r\n        </Cell>\r\n      ))}\r\n    </Row>\r\n  );\r\n\r\n  const renderRows = (data, ind) => (\r\n    <Row\r\n      className=\"coinRow\"\r\n      style={{ zIndex: \"3\" }}\r\n      key={`${data.id}${ind}`}\r\n      onClick={() => {\r\n        setLoading({\r\n          load: true,\r\n          tip: `Loading Coin!`,\r\n        });\r\n        //timeout\r\n        history.push(`/coin/${data.id}`);\r\n      }}\r\n    >\r\n      <Cell className=\"stickyBG\" style={{ zIndex: \"2\" }}>\r\n        {columns.coin.render(data)}\r\n      </Cell>\r\n      <Cell>{columns.symbol.render(data)}</Cell>\r\n      <Cell>{columns.current_price.render(data)}</Cell>\r\n      <Cell>{columns.price_change_percentage_1h_in_currency.render(data)}</Cell>\r\n      <Cell>\r\n        {columns.price_change_percentage_24h_in_currency.render(data)}\r\n      </Cell>\r\n      <Cell>{columns.price_change_percentage_7d_in_currency.render(data)}</Cell>\r\n      <Cell>{columns.sparkline_in_7d.render(data)}</Cell>\r\n    </Row>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {stateValues.coins && (\r\n        // <AntdRow>\r\n        <StickyTable>\r\n          {renderHeader()}\r\n          {stateValues.coins.map((data, ind) => renderRows(data, ind))}\r\n        </StickyTable>\r\n        // </AntdRow>\r\n      )}\r\n      {/* <Table\r\n        onRow={(record) => {\r\n          return {\r\n            , // click row\r\n          };\r\n        }}\r\n        pagination={false}\r\n        columns={columns}\r\n        dataSource={stateValues.coins}\r\n        rowKey={(record, indx) => `${record.id}${indx}`}\r\n        sticky={true}\r\n        scroll={{ x: \"max-content\" }}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\helpers.js",["100"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\coinsHomeListing.js",["101"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\CoinsHomeListing.js",["102","103","104","105","106"],"import \"../App.css\";\r\nimport React, { useEffect, useContext, useRef } from \"react\";\r\nimport { getCoins, getAllCoinsList } from \"../utils/api.js\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Spinner } from \"./loadingSpinner/Spinner\";\r\nimport { stateCoinsContext } from \"./App\";\r\nimport { CurrencyCard } from \"./CurrencyCard/CurrencyCard\";\r\nimport TableScroll from \"./TableScroll/TableScroll\";\r\n\r\nexport default function CoinsHomeListing(props) {\r\n  const {\r\n    moreItemsC,\r\n    numOfPagesC,\r\n    stateCoinsC,\r\n    isLoadingC,\r\n    scrollParentRefC,\r\n    selectedCoinC,\r\n    scrollPositionC,\r\n  } = useContext(stateCoinsContext);\r\n  const scrollParentRef = useRef(null);\r\n\r\n  const [selectedCoin] = selectedCoinC;\r\n  const [moreItems, setMoreItems] = moreItemsC;\r\n  const [numOfPages, setnumOfPages] = numOfPagesC;\r\n  const [stateValues, setStateValues] = stateCoinsC;\r\n  const [isLoading, setLoading] = isLoadingC;\r\n  const [scrollPosition, setScrollPosition] = scrollPositionC;\r\n  //\r\n  const tip = \"\";\r\n\r\n  useEffect(() => {\r\n    if (!numOfPages) {\r\n      getAllCoinsList().then((responseAllCoins) => {\r\n        setnumOfPages(Math.ceil(responseAllCoins.length / 250));\r\n      });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    if (scrollPosition) {\r\n      document?.getElementById(scrollPosition)?.scrollIntoView();\r\n    }\r\n  }, [selectedCoin]);\r\n\r\n  const fetchData = () => {\r\n    if (isLoading.load || !moreItems || selectedCoin) return;\r\n    //\r\n    setLoading({\r\n      load: true,\r\n      tip: \"Fetching Coins...\",\r\n    });\r\n    if (stateValues.page > numOfPages) {\r\n      setMoreItems(false);\r\n    }\r\n    getCoins(stateValues.page).then((responseCoins) => {\r\n\r\n      setStateValues((prevState) => {\r\n        return {\r\n          coins: prevState.coins\r\n            .concat(responseCoins)\r\n            .filter((val, id, array) => array.indexOf(val) === id),\r\n          page: prevState.page + 1,\r\n        };\r\n      });\r\n      setLoading(false);\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"CoinsListingContainer\" ref={scrollParentRef}>\r\n      {isLoading.load && <Spinner tip={isLoading.tip} />}\r\n\r\n      {numOfPages && (\r\n        <InfiniteScroll\r\n          loadMore={fetchData}\r\n          hasMore={moreItems}\r\n          getScrollParent={() => scrollParentRefC.current}\r\n          useWindow={false}\r\n        >\r\n          <TableScroll parentRef={scrollParentRefC} />\r\n          {!moreItems && (\r\n            <p style={{ textAlign: \"center\" }}>\r\n              <b>You have seen it all...</b>\r\n            </p>\r\n          )}\r\n        </InfiniteScroll>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\TagLinks.jsx",["107","108","109"],"import \"../../App.css\";\r\nimport \"./Coin.css\";\r\nimport React from \"react\";\r\nimport { Tag } from \"antd\";\r\nimport {\r\n  TwitterOutlined,\r\n  FacebookOutlined,\r\n  RedditOutlined,\r\n  SendOutlined,\r\n  CodeSandboxOutlined,\r\n  GithubOutlined,\r\n  LinkOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { colors } from \"../../utils/const\";\r\n\r\nexport default function TagLinks(props) {\r\n  const { coinData } = props;\r\n  const { facebook, reddit, twitter, telegram, repos, blueGray } = colors;\r\n\r\n  const renderItemLink = (item, color, icon) => {\r\n    if (!item) return;\r\n    let url, itemName;\r\n    if (item.length) {\r\n      url = new URL(item);\r\n      const itemSplit = url.hostname.split(\".\");\r\n\r\n      itemName = itemSplit[Math.floor((itemSplit.length - 1) / 2)];\r\n    }\r\n    return item?.length ? (\r\n      <Tag key={url} icon={icon} color={color}>\r\n        <a href={item}>{itemName}</a>\r\n      </Tag>\r\n    ) : null;\r\n  };\r\n\r\n  const checkForContent = (section) => {\r\n    switch (section) {\r\n      case \"social\":\r\n        if (\r\n          coinData.links.subreddit_url?.length ||\r\n          coinData.links.twitter_screen_name?.length ||\r\n          coinData.links.facebook_username?.length ||\r\n          coinData.links.telegram_channel_identifier?.length ||\r\n          coinData.links.official_forum_url[0]\r\n        ) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tagLinks\">\r\n      {coinData.coingecko_rank && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Rank</div>\r\n          <div className=\"tagsContainer\">\r\n            <Tag className=\"rank\">Rank #{coinData.coingecko_rank}</Tag>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {coinData.links.homepage[0] && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Website</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.homepage.map((item) => renderItemLink(item))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {coinData.links.blockchain_site[0] && (\r\n        <div className=\"tagRow\">\r\n          <div className=\"tagLegend\">Explorers</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.blockchain_site.map((item) => renderItemLink(item))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {checkForContent(\"social\") && (\r\n        <div className=\"tagRow social\">\r\n          <div className=\"tagLegend\">Community</div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.subreddit_url && (\r\n              <Tag icon={<RedditOutlined />} color={reddit}>\r\n                <a href={coinData.links.subreddit_url}>Reddit</a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.twitter_screen_name && (\r\n              <Tag icon={<TwitterOutlined />} color={twitter}>\r\n                <a\r\n                  href={`https://twitter.com/${coinData.links.twitter_screen_name}`}\r\n                >\r\n                  Twitter\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.facebook_username && (\r\n              <Tag icon={<FacebookOutlined />} color={facebook}>\r\n                <a\r\n                  href={`https://facebook.com/${coinData.links.facebook_username}`}\r\n                >\r\n                  Facebook\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.telegram_channel_identifier && (\r\n              <Tag icon={<SendOutlined />} color={telegram}>\r\n                <a\r\n                  href={`https://t.me/${coinData.links.telegram_channel_identifier}`}\r\n                >\r\n                  Telegram\r\n                </a>\r\n              </Tag>\r\n            )}\r\n            {coinData.links.official_forum_url &&\r\n              coinData.links.homepage.map((item) =>\r\n                renderItemLink(item, blueGray, <LinkOutlined />)\r\n              )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {(coinData.links.repos_url.github[0] ||\r\n        coinData.links.repos_url.bitbucket[0]) && (\r\n        <div className=\"tagRow repos\">\r\n          <div className=\"tagLegend\">\r\n            <span>Source Code</span>\r\n          </div>\r\n          <div className=\"tagsContainer\">\r\n            {coinData.links.repos_url.github.map((item, indx) => {\r\n              if (!item.length) return;\r\n\r\n              return (\r\n                <Tag\r\n                  key={`${item} ${indx}`}\r\n                  icon={<GithubOutlined />}\r\n                  color={repos}\r\n                >\r\n                  <a href={item}>Github</a>\r\n                </Tag>\r\n              );\r\n            })}\r\n            {coinData.links.repos_url.bitbucket.map((item) => {\r\n              if (!item.length) return;\r\n\r\n              return (\r\n                <Tag\r\n                  icon={<CodeSandboxOutlined />}\r\n                  className=\"forum\"\r\n                  color={repos}\r\n                >\r\n                  <a href={item}>Bitbucket</a>\r\n                </Tag>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\Coin.jsx",["110","111","112","113"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinChart.jsx",["114"],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\utils\\const.js",[],"C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinInfo.jsx",["115"],"import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport {\r\n  formatPrice,\r\n  formatPercentage,\r\n  formatNumber,\r\n  renderInfo\r\n} from \"../../utils/helpers\";\r\n\r\nexport default function CoinDataTable(props) {\r\n  const { coinData } = props;\r\n  const typeMoney = formatPrice;\r\n  const typePercent = formatPercentage;\r\n  const typeNumber = formatNumber;\r\n  return (\r\n    <Row className=\"coinTableContainer\">\r\n      <Col\r\n        className=\"topRightInfo\"\r\n        sm={{ span: 22, offset: 2 }}\r\n        xs={{ span: 12 }}\r\n      >\r\n        {renderInfo(\r\n          coinData.market_data.market_cap.usd,\r\n          \"Market Cap\",\r\n          typeMoney\r\n        )}\r\n        {renderInfo(\r\n          [coinData.market_data.low_24h.usd, coinData.market_data.high_24h.usd],\r\n          \"24h Low / 24h High\",\r\n          typeMoney\r\n        )}\r\n        {renderInfo(\r\n          coinData.market_data.fully_diluted_valuation.usd,\r\n          \"Fully Diluted Valuation\",\r\n          typeMoney\r\n        )}\r\n      </Col>\r\n      <Col\r\n        className=\"topRightInfo\"\r\n        sm={{ span: 22, offset: 2 }}\r\n        xs={{ span: 12 }}\r\n      >\r\n        {renderInfo(coinData.total_volume, \"24 Hour Trading Vol\", typeMoney)}\r\n        {renderInfo(\r\n          [\r\n            coinData.market_data.circulating_supply,\r\n            coinData.market_data.max_supply,\r\n          ],\r\n          \"Circulating Supply\",\r\n          typeNumber\r\n        )}\r\n        {renderInfo(\r\n          coinData.market_data.total_volume.usd,\r\n          \"24 Hour Trading Vol\",\r\n          typeMoney\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","C:\\dev\\react\\react-api-crypto-tracker-v1\\src\\components\\Coin\\CoinBottomInfo.jsx",["116","117","118","119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"121","replacedBy":"125"},{"ruleId":"123","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":14,"column":10,"nodeType":"129","messageId":"130","endLine":14,"endColumn":22},{"ruleId":"127","severity":1,"message":"131","line":15,"column":10,"nodeType":"129","messageId":"130","endLine":15,"endColumn":19},{"ruleId":"127","severity":1,"message":"132","line":15,"column":21,"nodeType":"129","messageId":"130","endLine":15,"endColumn":31},{"ruleId":"121","replacedBy":"133"},{"ruleId":"123","replacedBy":"134"},{"ruleId":"127","severity":1,"message":"135","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":15},{"ruleId":"127","severity":1,"message":"136","line":7,"column":17,"nodeType":"129","messageId":"130","endLine":7,"endColumn":24},{"ruleId":"127","severity":1,"message":"137","line":7,"column":33,"nodeType":"129","messageId":"130","endLine":7,"endColumn":40},{"ruleId":"127","severity":1,"message":"131","line":15,"column":10,"nodeType":"129","messageId":"130","endLine":15,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":22,"column":6,"nodeType":"140","endLine":22,"endColumn":8,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":98,"column":27,"nodeType":"144","messageId":"145","endLine":98,"endColumn":29},{"ruleId":"138","severity":1,"message":"146","line":38,"column":6,"nodeType":"140","endLine":38,"endColumn":8,"suggestions":"147"},{"ruleId":"127","severity":1,"message":"148","line":7,"column":10,"nodeType":"129","messageId":"130","endLine":7,"endColumn":22},{"ruleId":"127","severity":1,"message":"149","line":27,"column":26,"nodeType":"129","messageId":"130","endLine":27,"endColumn":43},{"ruleId":"127","severity":1,"message":"150","line":29,"column":9,"nodeType":"129","messageId":"130","endLine":29,"endColumn":12},{"ruleId":"138","severity":1,"message":"151","line":38,"column":6,"nodeType":"140","endLine":38,"endColumn":8,"suggestions":"152"},{"ruleId":"138","severity":1,"message":"153","line":45,"column":6,"nodeType":"140","endLine":45,"endColumn":20,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":50,"column":9,"nodeType":"157","messageId":"158","endLine":50,"endColumn":15},{"ruleId":"142","severity":1,"message":"143","line":135,"column":33,"nodeType":"159","messageId":"160","endLine":135,"endColumn":40},{"ruleId":"142","severity":1,"message":"143","line":148,"column":33,"nodeType":"159","messageId":"160","endLine":148,"endColumn":40},{"ruleId":"127","severity":1,"message":"161","line":26,"column":10,"nodeType":"129","messageId":"130","endLine":26,"endColumn":20},{"ruleId":"127","severity":1,"message":"162","line":27,"column":10,"nodeType":"129","messageId":"130","endLine":27,"endColumn":24},{"ruleId":"138","severity":1,"message":"163","line":45,"column":16,"nodeType":"164","endLine":45,"endColumn":56},{"ruleId":"138","severity":1,"message":"139","line":68,"column":6,"nodeType":"140","endLine":68,"endColumn":20,"suggestions":"165"},{"ruleId":"127","severity":1,"message":"166","line":14,"column":24,"nodeType":"129","messageId":"130","endLine":14,"endColumn":39},{"ruleId":"127","severity":1,"message":"167","line":13,"column":9,"nodeType":"129","messageId":"130","endLine":13,"endColumn":20},{"ruleId":"127","severity":1,"message":"168","line":3,"column":27,"nodeType":"129","messageId":"130","endLine":3,"endColumn":37},{"ruleId":"127","severity":1,"message":"169","line":17,"column":9,"nodeType":"129","messageId":"130","endLine":17,"endColumn":19},{"ruleId":"170","severity":1,"message":"171","line":21,"column":16,"nodeType":"172","messageId":"173","endLine":21,"endColumn":17},{"ruleId":"142","severity":1,"message":"143","line":29,"column":21,"nodeType":"144","messageId":"145","endLine":29,"endColumn":23},{"ruleId":"138","severity":1,"message":"174","line":86,"column":6,"nodeType":"140","endLine":86,"endColumn":8,"suggestions":"175"},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],["176"],["177"],"no-unused-vars","'selectedCoin' is assigned a value but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'setLoading' is assigned a value but never used.",["176"],["177"],"'Table' is defined but never used.","'AntdRow' is defined but never used.","'AntdCol' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array.","ArrayExpression",["178"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'numOfPages', 'selectedCoin', 'setLoading', and 'setnumOfPages'. Either include them or remove the dependency array.",["179"],"'CurrencyCard' is defined but never used.","'setScrollPosition' is assigned a value but never used.","'tip' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'numOfPages', 'setLoading', and 'setnumOfPages'. Either include them or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'scrollPosition' and 'setLoading'. Either include them or remove the dependency array.",["181"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","ReturnStatement","expectedReturnValue","'searchText' is assigned a value but never used.","'scrollPosition' is assigned a value but never used.","Assignments to the 'urlSlice' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["182"],"'setSelectedCoin' is assigned a value but never used.","'typePercent' is assigned a value but never used.","'useContext' is defined but never used.","'typeNumber' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has missing dependencies: 'constructData', 'dataArr', 'props', 'typeDate', 'typeMoney', and 'typePercent'. Either include them or remove the dependency array.",["183"],"no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [setLoading]",{"range":"196","text":"197"},"Update the dependencies array to be: [numOfPages, selectedCoin, setLoading, setnumOfPages]",{"range":"198","text":"199"},"Update the dependencies array to be: [numOfPages, setLoading, setnumOfPages]",{"range":"200","text":"201"},"Update the dependencies array to be: [scrollPosition, selectedCoin, setLoading]",{"range":"202","text":"203"},"Update the dependencies array to be: [selectedCoin, setLoading]",{"range":"204","text":"205"},"Update the dependencies array to be: [constructData, dataArr, props, typeDate, typeMoney, typePercent]",{"range":"206","text":"207"},[765,767],"[setLoading]",[1168,1170],"[numOfPages, selectedCoin, setLoading, setnumOfPages]",[1240,1242],"[numOfPages, setLoading, setnumOfPages]",[1399,1413],"[scrollPosition, selectedCoin, setLoading]",[1951,1965],"[selectedCoin, setLoading]",[2448,2450],"[constructData, dataArr, props, typeDate, typeMoney, typePercent]"]